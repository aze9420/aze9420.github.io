{"pages":[{"title":"","text":"404 - File not found L2Dwidget.init({\"log\":false,\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"pluginRootPath\":\"live2dw/\",\"tagMode\":false}); ————————————————","link":"/404.html"},{"title":"about","text":"这是我的博客，欢迎你关注我！biubiu~~","link":"/about/index.html"}],"posts":[{"title":"git和github","text":"git和github的简单教程 git和github的简单教程 附：github搜索技巧 项目名字(name)里有 python 的in:name python 名字(name)里有 python 的并且 stars 大于 3000 的in:name python starts:&gt;3000 名字(name)里有 python 的并且 stars 大于 3000 、forks 大于 200 的in:name python starts:&gt;3000 forks:&gt;200 详情(readme)里面有 python 的并且 stars 大于 3000 的in:readme python starts:&gt;3000 描述(description)里面有 python 的并且 stars 大于 3000 的in:description python starts:&gt;3000 描述(description)里面有 python 的并且是 python 语言的in:description python language:python 描述(description)里面有 python 的并且 2019-12-20 号之后有更新过的in:description python pushed:&gt;2019-12-20","link":"/2020/03/07/github/"},{"title":"linux学习笔记","text":"linux学习笔记 1 shell家族shell：命令解释器，根据输入的命令执行相应命令。 察看当前系统下有哪些shell： 1cat /etc/shells 察看当前系统正在使用的shell。 1echo $SHELL 常见shell： 123456/bin/sh (已经被 /bin/bash 所取代)/bin/bash (就是 Linux 默认的 shell)/bin/ksh (Kornshell 由 AT&amp;T Bell lab. 发展出来的，兼容于 bash)/bin/tcsh (整合 C Shell ，提供更多的功能)/bin/csh (已经被 /bin/tcsh 所取代)/bin/zsh (基于 ksh 发展出来的，功能更强大的 shell) 1.2 bashbash 是一个为GNU计划编写的Unix shell。它的名字是一系列缩写：Bourne-Again SHell — 这是关于Bourne shell（sh）的一个双关语（Bourne again / born again）bash 是 许 多 Linux 平 台 的 内 定 Shell， 事 实 上， 还 有 许 多 传 统 UNIX 上 用 的 Shell， 像 tcsh、csh、ash、bsh、ksh等等，Shell Script大致都类同，当您学会一种Shell以后，其 它的Shell会很快就上手，大多数的时候，一个Shell Script通常可以在很多种Shell上使用。 bash是大多数Linux系统以及Mac OS X v10.4默认的shell，它能运行于大多数Unix风格 的操作系统之上，甚至被移植到了Microsoft Windows上的Cygwin系统中，以实现windows的POSIX虚拟接口。此外，它也被DJGPP项目移植到了MS-DOS上。 1.3 命令和路径补齐在bash下敲命令时，Tab键可以补全已经敲了一部分的文件名和目录名。如果是Ubuntu 系统，系统默认启用了bash completion，还可以补全命令的某些参数、Makefile目标等 等。如果是Debian系统，可以用以下命令启用bash completion： 1$ source /etc/bash_completion 建议将这一行加入∼/.bashrc启动脚本中。比如使用sudo后面接命令，如果没有bash completion则只有sudo可以补全，后面的命令不能补全。如果启用了bash completion，则 后面的命令，包括命令的某些参数（比如aptitude命令的install）都可以补全了。 比如在主目录下要列出桌面目录的内容，输入（不回车） 1$ ls De 然后敲Tab键，如果以De开头的文件或文件夹只有Desktop一个，就自动补全为 1$ ls Desktop 否则，再敲一次Tab键，将会把所有以De开头的文件或文件夹列在下面供你选择(在这里 我们手动创建另外一个以De开头的文件) 123$ touch Death$ ls DeDeath Desktop/ 你可以再补敲一个s再Tab，这次Desktop就会补全到命令后面了。有 的 人 是 从 DOS 时 代 过 来 的， 留 下 一 个 很 不 好 的 习 惯 就 是 在 找 一 个 文 件 时 反 复 地cd、ls、cd、ls等找到了要找的文件时再想回到先前的目录，已经不记得先前是 从哪个目录转到这里来的了。 我们从上面可以看出，Tab补全本身就具备了ls的功能，上面的Tab补全相当于ls -Fd De*命令。所以我们完全不必反复地cd到别的目录然后ls去找文件，多按几次Tab就可以一条 命令完成了，这样的好处是我们的当前目录不用变，不需要找完了文件再cd回来，同时省去 了大量的按键次数。更重要的是，自动补全同时兼具了检查拼写错误的功能，如果前面几个 字母拼写错了，就补全不出东西来，用户就知道拼写错了，如果前面几个字母没有拼写错， 那么由系统补全出来的文件名肯定也不会有拼写错误，避免了用户在敲很长的文件名时易犯 的拼写错误。 1.4 历史记录1history 历史记录是另外一个非常方便的功能。按上下移动光标键（或者Ctrl-p、Ctrl-n）可以 一条一条浏览以前输过的命令。如果有需要重复输入的命令就不用输第二次了。如果你能记 住以前输过的某条命令中的某个关键字，可以按Ctrl-r，然后输入关键字，随着你每输入一 个字母，bash会做增量式（increasingly）查找，也可以反复按Ctrl-r或Ctrl-s向前向后查 找。如果找到了，按左右移动光标键或Home键(Ctrl-a)或End键(Ctrl-e)将该命令带回提示 符下进一步修改，或者直接按Enter键原封不动地执行该命令。 1.5 主键盘快捷键bash的快捷键和emacs保持一致，用惯其中之一再用另一个程序会很顺手的。请记住一条原则：尽量使用主键盘快捷键而不使用移动光标键和编辑键。因为手不必离开主键盘是效 率最高的，这样在你一生之中所节省的来回移动手的时间绝对可以用星期来计算，是绝对值 得你花十分钟的时间记住这些快捷键的。 功能 快捷键 助记 上 Ctrl-p previous 下 Ctrl-n next 左 Ctrl-b backward 右 Ctrl-f forward Del Ctrl-d delete光标后面的 Home Ctrl-a the first letter End Ctrl-e end Backspace Backspace delete光标前面的 目录和文件2.1 类Unix系统目录结构ubuntu没有盘符这个概念，只有一个根目录/，所有文件都在它下面 123456789101112131415161718/ 根目录bin //系统可执行程序，如命令boot //内核和启动程序，所有和启动相关的文件都保存在这里 grub //引导器相关文件dev //设备文件etc //系统软件的启动和配置文件，系统在启动过程中需要读取的文件都在这个目录。如LILO参数、用 户账户和密码。home //用户的主目录。下面是自己定义的用户名的文件夹lib //系统程序库文件,这个目录里存放着系统最基本的动态链接共享库，类似于Windows下的system32 目录，几乎所有的应用程序都需要用到这些共享库。media //挂载媒体设备，如光驱、U盘等mnt //目录是让用户临时挂载别的文件系统，如挂载Windows下的某个分区，ubuntu默认还是挂载在/media 目录。opt //可选的应用软件包（很少使用）proc //这个目录是系统内存的映射，我们可以直接访问这个目录来获取系统信息。也就是说，这个目录 的内容不在硬盘上而是在内存里。sbin //管理员系统程序 selinuxsrvsys //udev用到的设备目录树，/sys反映你机器当前所接的设备 tmp //临时文件夹usr //这是个最庞大的目录，我们要用到的很多应用程序和文件几乎都存放在这个目录下。] bin // 应用程序game //游戏程序 includelib //应用程序的库文件 lib64local //包含用户程序等 sbin //管理员应用程序 2.2 用户目录位于/home/user，称之为用户工作目录或家目录,表示方式： 12/home/user~ 2.2.1 相对路径和绝对路径绝对路径 从/目录开始描述的路径为绝对路径，如： 1cd /home ls /usr 相对路径 从当前位置开始描述的路径为相对路径，如： 1cd ../../ ls abc/def .和.. 每个目录下都有.和... 表示当前目录.. 表示上一级目录，即父目录 根目录下的.和..都表示当前目录 2.3 ls1ls [OPTION]… [FILE]… ls是英文单词list的简写，其功能为列出目录的内容。这是用户最常用的一个命令，因 为用户需要不时地查看某个目录的内容。该命令类似于DOS下的dir命令。 对于每个目录， 该命令将列出其中的所有子目录与文件。对于每个文件，ls将输出其文件名以及所要求的其 他信息。默认情况下，输出条目按字母顺序排序。当未给出目录名或是文件名时，就显示当 前目录的信息。 主要的OPTION有： 123-a 列出隐藏文件，文件中以“.”开头的均为隐藏文件，如：~/.bashrc-l 列出文件的详细信息-R 连同子目录中的内容一起列出 用ls -l命令显示的信息中，开头是由10个字符构成的字符串，其中第一个字符表示文 件类型，它可以是下述类型之一： 12345- 普通文件 d 目录l 符号链接b 块设备文件c 字符设备文件s socket文件，网络套接字 p 管道 后面的9个字符表示文件的访问权限，分为3组，每组3位。第一组表示文件属主的权 限，第二组表示同组用户的权限，第三组表示其他用户的权限。每一组的三个字符分别表示 对文件的读、写和执行权限。各权限如下所示： 123456r 读w 写x 可执行。对于目录，表示进入权限。s 当文件被执行时，把该文件的UID或GID赋予执行进程的UID（用户ID）或GID（组 ID）。t 设置标志位（sticky bit）。如果是有sticky bit的目录，在该目录下任何用户只要有适当的权限即可创建文 件，但文件只能被超级用户、目录拥有者或文件属主删除。如果是有sticky bit的可执行文件，在该文件执行后， 指向其正文段的指针仍留在内存。这样再次执行它时，系统就能更快地装入该文件。- 没有相应位置的权限。 访问权限后面的数字表示与该文件共享inode的文件总数，即硬链接数(参见下面ln命 令)。 2.4 cdchange dir 改变当前所在路径 12cd ~cd dir1/dir2 cd .. 2.5 which查看指定命令所在路径 1which ls 2.6 pwd查看当前所在路径 1pwd 2.7 mkdir1mkdir [OPTION] DIRECTORY… 创建目录DIRECTORY，可以一次创建多个。OPTION如果是-p，表示可以连同父目录一起 创建。 2.8 rmdir1rmdir [OPTION]… DIRECTORY… 删除空目录，可以一次删除多个。OPTION如果是-p，表示可以连同空的父目录一起删 除。mkdir和rmdir的用法举例： 12345678910$ mkdir a$ mkdir a/b$ ls a b$ rmdir a/b$ ls a$ rmdir a$ mkdir a/bmkdir: cannot create directory `a/b': No such file or directory$ mkdir -p a/b$ rmdir -p a/b 2.9 touch1touch [OPTION]… FILE… 将每个文件的访问及修改时间都更新为目前的时间。 如果文件不存在，则创建一个字节数为0的文件。 2.10 rm删除文件： 1rm file 删除目录： 1rm dir -rf 2.11 mv重命名： 1mv file1 file2 移动文件: 1mv file1 ~/ 2.12 cp拷贝文件： 1cp file1 file2 cp file1 dir/ cp file1 ../ 拷贝目录: 1cp dir1 dir2 -r cp dir1 ~/ -r 2.13 cat查看文件里内容，输出到终端，如果cat时没跟文件名，则读标准输入，遇到\\n后，输 出到标准输出，终端下输入Ctrl-d表示结束 2.14 more1more [OPTION] FILE… 查看文本文件的内容，屏幕显示完一屏就等待用户按下任意键再滚动到下一屏，如果中 途不想继续看下去了，可以按Ctrl+C或q终止显示。 2.15 less1less [OPTION] FILE… 查看文本文件的内容，屏幕显示完一屏就等待用户按键，用户可以向上或向下查看，如 果中途不想继续看下去了，可以按Ctrl+C或q终止显示。 2.16 headhead [OPTION]… FILE… 显示指定文件的前面几行。如果没有指定文件，将从标准输入（键盘）上读取。如果没有指定要显示的行数，则默认显示前10行。如果要显示文件的前5行： 1$ head -5 file1 2.17 tailtail [OPTION]… FILE… 显示文件的最后几行。若没有指定显示的行或字符数，则默认显示末尾10行。如果要显示文件末5行： 1$ tail -5 file1 2.18 ln链接有两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。建立硬链接时，链接文件和被链接文件必须位于同一个文件系统中，并且不能建立 指向目录的硬链接。而对符号链接，则不存在这个问题。默认情况下，ln产生硬链接。如果 给ln命令加上-s选项，则建立符号链接。举例如下，注意ls -l列出文件的硬链接数和字节 数： 硬链接： 12touch helloln hello word_h 软链接： 1ln -s hello word_s 2.19 tree这个命令需要下载安装，ubuntu下 1sudo apt-get install tree 按结构树的形状显示目录和文件 2.20 wc利用 wc 指令我们可以计算文件的 Byte 数、字数、或是列数,若不指定文件名称、或 是所给予的文件名为“-”,则 wc 指令会从标准输入设备读取数据。 1wc -l ./* -c 或–bytes 或–chars 只显示 Bytes 数。-l 或–lines 只显示列数。-w 或–words 只显示字数。 2.21 od1od -tcx file1 -t 指定数据的显示格式，主要的参数有：c ASCII字符或反斜杠序列d[SIZE] 有符号十进制数,每个整数SIZE字节。 f[SIZE] 浮点数,每个整数SIZE字节。o[SIZE] 八进制（系统默认值为02）,每个整数SIZE字节。 u[SIZE] 无符号十进制数,每个整数SIZE字节。x[SIZE] 十六进制数,每个整数SIZE字节。 2.22 du查看某个目录的大小： 以M为单位 1du -hm /home/sihai/test 以B为单位 1du -hb ./* 以K为单位,4k的整数倍 1du -hk ./* 2.23 dfdf查看磁盘使用情况 1df --block-size=GB df --block-size=MB 文件属性和用户用户组3.1 whoami查看当前登陆用户 3.2 chmod 文字设定法 chmod [who] [+|-|=] [mode] 文件名 操作对象who可是下述字母中的任一个或者它们的组合： u 表示“用户（user）”，即文件或目录的所有者。g 表示“同组（group）用户”，即与文件属主有相同组ID的所有用户。 o 表示“其他（others）用户”。a 表示“所有（all）用户”。它是系统默认值。 操作符号可以是： +添加某个权限。 -取消某个权限。 = 赋予给定权限并取消其他所有权限（如果有的话）。 设置mode所表示的权限可用下述字母的任意组合： r 可读。 w 可写。x 可执行。 数字设定法 chmod [mode] 文件名 我们必须首先了解用数字表示的属性的含义： 0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限， 然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是（u）（g）（o）。 例如，如果想让某个文件的属主有“读/写”二种权限，需要把4（可读）+2（可写）＝ 6（读/写）。 比如设置一个文件允许所有用户可写 1$ chmod a+w file1 设置一个文件允许所有用户可读、可写、不可执行 1$ chmod 666 file1 3.3 chown chown [OPTION]… [OWNER:GROUP] FILE… chown [OPTION]… –reference=RFILE FILE… 更改某个文件或目录的属主和属组。这个命令也很常用。例如root用户把自己的一个文件拷贝给用户A, 为了让用户A能够存取这个文件，root用户应该把这个文件的属主设为A， 否则，用户A无法存取这个文件。 OPTION的主要参数： -R 递归式地改变指定目录及其下的所有子目录和文件的拥有者。 -v 显示chown命令所做的工作。 比如把一个文件改为sihai用户和nogroup用户组所有 1$ sudo chown sihai:nogroup file1 注意： chown需要特权用户才能执行 一个文件的owner和owning group是没有关联的。一个文件属于用户A，也属于用户组 B，并不表示用户A属于用户组B。 3.4 chgrp chgrp [OPTION]… GROUP FILE… chgrp [OPTION]… –reference=RFILE FILE… 该命令改变（指定）指定文件所属的用户组。其中group可以是用户组ID，也可以是/etc/group文件中用户组的组名。 文件名是以空格分开的要改变属组的文件列表，支持通配 符。如果用户不是该文件的属主或超级用户，则不能改变该文件的组。 OPTION的主要参数： -R 递归式地改变指定目录及其下的所有子目录和文件的属组。 查找与检索4.1 find根据文件名查找 find [OPTION] path… [expression] 在目录中搜索文件，path指定目录路径，系统从这里开始沿着目录树向下查找文件。它是一个路径列表，相互用空格分离，如果不写path，那么默认为当前目录。Expression 是 find命令接受的表达式，find命令的所有操作都是针对表达式的。 一条最常用的find命令－－在当前目录及子目录下查找所有以file开头的文件名。 1234567$ find . -name 'file*'$ find / -name 'vimrc'$ find ~ -name '*.c' 4.2 grep根据内容检索 1grep [options] PATTERN [FILE...] 在指定文件中搜索特定的内容，并将含有这些内容的行输出到标准输出。若不指定文件 名，则从标准输入读取。[options]部分包含的主要参数： -c：只输出匹配行的计数。 -I：不区分大小写（只适用于单字符）。 -h：查询多文件时不显示文件名。 -l：查询多文件时只输出包含匹配字符的文件名。 -n：显示匹配行及行号。 -s：不显示不存在或无匹配文本的错误信息。 -v：显示不包含匹配文本的所有行。 -R: 连同子目录中所有文件一起查找。 比如到系统头文件目录下查找所有包含printf的文件 1$ grep 'printf' /usr/include -R 安装卸载软件5.1 apt-get更新源服务器列表 1sudo vi /etc/apt/sources.list 更新完服务器列表后需要更新下源 sudo apt-get update 更新源sudo apt-get install package 安装包sudo apt-get remove package 删除包sudo apt-cache search package 搜索软件包sudo apt-cache show package 获取包的相关信息，如说明、大小、版本等 sudo apt-get install package –reinstall 重新安装包sudo apt-get -f install 修复安装sudo apt-get remove package –purge 删除包，包括配置文件等 sudo apt-get build-dep package 安装相关的编译环境sudo apt-get upgrade 更新已安装的包 sudo apt-get dist-upgrade 升级系统sudo apt-cache depends package 了解使用该包依赖那些包 sudo apt-cache rdepends package 查看该包被哪些包依赖 sudo apt-get source package 下载该包的源代码sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包 sudo apt-get check 检查是否有损坏的依赖 5.2 deb包安装 安装deb软件包命令： sudo dpkg -i xxx.deb删除软件包命令： sudo dpkg -r xxx.deb连同配置文件一起删除命令： sudo dpkg -r –purge xxx.deb查看软件包信息命令： sudo dpkg -info xxx.deb查看文件拷贝详情命令： sudo dpkg -L xxx.deb查看系统中已安装软件包信息命令： sudo dpkg -l重新配置软件包命令： sudo dpkg-reconfigure xxx 5.3 原码安装 解压缩源代码包 cd dir ./configure 检测文件是否缺失，创建Makefile,检测编译环境 make 编译源码，生成库和可执行程序 sudo make install 把库和可执行程序，安装到系统路径下 磁盘管理6.1 mount命令格式： mount [-t vfstype] -o options device dir 其中： -t vfstype 指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常 用类型有： 光盘或光盘镜像：iso9660 DOS fat16文件系统：msdos Windows 9x fat32文件系统：vfat Windows NT ntfs文件系统：ntfs Mount Windows文件网络共享：smbfs UNIX(LINUX) 文件网络共享：nfs -o options 主要用来描述设备或档案的挂接方式。常用的参数有： loop：用来把一个文件当成硬盘分区挂接上系统ro：采用只读方式挂接设备rw：采用读写方式挂接设备 iocharset：指定访问文件系统所用字符集 device 要挂接(mount)的设备。 dir设备在系统上的挂接点(mount point)。 6.1.1 挂接光盘镜像文件由 于 近 年 来 磁 盘 技 术 的 巨 大 进 步， 新 的 电 脑 系 统 都 配 备 了 大 容 量 的 磁 盘 系 统， 在 Windows下许多人都习惯把软件和资料做成光盘镜像文件通过虚拟 光驱来使用。这样做有 许多好处：一、减轻了光驱的磨损;二、现在硬盘容量巨大存放几十个光盘镜像文件不成问 题，随用随调十分方便;三、硬盘的读取速度要远 远高于光盘的读取速度，CPU占用率大大 降低。其实linux系统下制作和使用光盘镜像比Windows系统更方便，不必借用任何第三方软 件包。 1.从光盘制作光盘镜像文件。将光盘放入光驱，执行下面的命令。 1cp /dev/cdrom /home/sunky/mydisk.iso 或 1dd if=/dev/cdrom of=/home/sunky/mydisk.iso 注：执行上面的任何一条命令都可将当前光驱里的光盘制作成光盘镜像文件/home/ sunky/mydisk.iso 2.文件和目录制作成光盘镜像文件，执行下面的命令。 1mkisofs -r -J -V mydisk -o /home/sunky/mydisk.iso /home/sunky/ mydir 注：这条命令将/home/sunky/mydir目录下所有的目录和文件制作成光盘镜像文件/ home/sunky/mydisk.iso，光盘卷标为：mydisk 3.光盘镜像文件的挂接(mount) 1mkdir /mnt/vcdrom 注：建立一个目录用来作挂接点(mount point) 1mount -o loop -t iso9660 /home/sunky/mydisk.iso /mnt/vcdrom 注：使用/mnt/vcdrom就可以访问盘镜像文件mydisk.iso里的所有文件了。 6.1.2 挂载U盘1.检测存储设备名称 1sudo fdisk -l 2.挂载存储设备sdb1到挂载点/mnt目录 1sudo mount /dev/sdb1 /mnt 3.访问/mnt 4.卸载/mnt 1sudo umount /mnt 6.2 umount卸载命令 1sudo umount 挂在点 6.3 dddd:拷贝 例1：拷贝光碟(注意，你的光碟是标准的 iso9660格式才可以这么做) 1dd if=/dev/cdrom of=cdrom.iso 例2：将文件sfile拷贝到文件 dfile中。 1$ dd if=sfile of=dfile 例3：创建一个100M的空文件 1dd if=/dev/zero of=hello.txt bs=100M count=1 /dev/null，外号叫无底洞，你可以向它输出任何数据，它通吃，并且不会撑着！ /dev/zero,是一个输入设备，你可你用它来初始化文件,从里面读出来的数据都是0。 压缩包管理7.1 tartar [主选项+辅选项] 文件或者目录 tar可以为文件和目录创建档案。 利用tar命令用户可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。使用该命令时，主选项是 必须要有的，辅选项是辅助使用的，可以选用。 主选项包括： c 创建新的档案文件。如果用户想备份一个目录或是一些文件，就要选择这个选项。 r 把要存档的文件追加到档案文件的未尾。 t 列出档案文件的内容，查看已经备份了哪些文件。 u 更新文件。用新增的文件取代原备份文件，如果在备份文件中找不到要更新的文件，则把它追加到备份文件的最 后。 x 从档案文件中释放文件。（常用） 辅选项包括： f 使用档案文件或设备，这个选项通常是必选的。（常用） k 保存已经存在的文件。 m 在还原文件时，把所有文件的修改时间设定为现在。 M 创建多卷的档案文件，以便在几个磁盘中存放。 v 详细报告tar处理的文件信息。如无此选项，tar不报告文件信息。（常用） w 每一步都要求确认。 z 用gzip来压缩/解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压 缩。（常用） j 用bzip2来压缩/解压缩文件，加上该选项后可以将档案文件进行压缩，但还原时也一定要使用该选项进行解压 缩。（常用） 要将文件备份到一个特定的设备，只需把设备名作为备份文件名。 打包： 1tar cvf dir.tar dir tar xvf dir.tar dir 打gz压缩包： 1tar zcvf dir.tar.gz dir tar zxvf dir.tar.gz 打bz2压缩包: 1tar jcvf dir.tar.bz2 dir tar jxvf dir.tar.bz2 指定目录解压缩： 1tar zxvf dir.tar.gz -C ~/test 7.2 rar打包：把dir压缩成newdir.rar 1rar a -r newdir dir 解包：把newdir.rar解压缩到当前目录 1unrar x newdir.rar ####7.3zip打包： 1zip -r dir.zip dir 解包： 1unzip dir.zip 进程管理8.1 who查看当前在线上的用户情况。所有的选项都是可选的，不使用任何选项时，who命令将 显示以下三项内容： login name：登录用户名； terminal line：使用终端设备； login time：登录到系统的时间。 12345sihai@ubuntu:~/demo$ who -uH名称 线路 时间 空闲 进程号 备注 sihai tty2 2014-08-14 13:31 . 6798sihai tty7 2014-08-14 01:31 旧 2423sihai pts/1 2014-08-14 01:31 12:00 2843 (:0)sihai pts/3 2014-08-14 10:39 . 2843 (:0) ####8.2 ps ps [选项] ps命令用于监控后台进程的工作情况，因为后台进程是不和屏幕键盘这些标准输入/输 出设备进行通信的，所以如果需要检测其情况，便可以使用ps命令了。选项部分如下： -e 显示所有进程。 -f 全格式。 -h 不显示标题。 -l 长格式。 -w 宽输出。 a 显示终端上的所有进程，包括其他用户的进程。 r 只显示正在运行的进程。 x 显示没有控制终端的进程。 这个命令参数有很多，但一般的用户只需掌握一些最常用的命令参数就可以了。 最常用的三个参数是u、a、x， 我们首先以root身份登录系统，查看当前进程状况 1234567891011121314sihai@ubuntu:~$ ps auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.0 0.0 3672 2008 ? Ss 08:46 0:01 /sbin/initsihai@ubuntu:~$ ps ajxPPID PID PGID SID TTY TPGID STAT UID TIME COMMAND 4592 6948 6948 4592 pts/3 6948 R+ 1000 0:00 ps ajxsihai@ubuntu:~$ ps -Lf 2423UID PID PPID LWP C NLWP STIME TTY STAT TIME CMD1000 2423 2282 2423 0 4 08:46 ? Ssl 0:00 gnome-session --session=ubuntu1000 2423 2282 2465 0 4 08:46 ? Ssl 0:00 gnome-session --session=ubuntu1000 2423 2282 2466 0 4 08:46 ? Ssl 0:00 gnome-session --session=ubuntu1000 2423 2282 2468 0 4 08:46 ? Ssl 0:00 gnome-session --session=ubuntu Head标头： USER 用户名UID 用户ID（User ID）PID 进程ID（Process ID）PPID 父进程的进程ID（Parent Process id） SID 会话ID（Session id）%CPU 进程的cpu占用率%MEM 进程的内存占用率VSZ 进程所使用的虚存的大小（Virtual Size）RSS 进程使用的驻留集大小或者是实际内存的大小，Kbytes字节。 TTY 与进程关联的终端（tty）STAT 进程的状态：进程状态使用字符表示的（STAT的状态码）R 运行 Runnable (on run queue) 正在运行或在运行队列中等待。S 睡眠 Sleeping 休眠中, 受阻, 在等待某个条件的形成或接受到信号。 I 空闲 IdleZ 僵死 Zombie（a defunct process) 进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调 用后释放。D 不可中断 Uninterruptible sleep (ususally IO) 收到信号不唤醒和不可运行, 进程必须等待直到有中 断发生。T 停止 Terminate 进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行。 P 等待交换页W 无驻留页 has no resident pages 没有足够的记忆体分页可分配。 X 死掉的进程&lt; 高优先级进程 高优先序的进程N 低优先 级进程 低优先序的进程L 内存锁页 Lock 有记忆体分页分配并缩在记忆体内 s 进程的领导者（在它之下有子进程）；l 多进程的（使用 CLONE_THREAD, 类似 NPTL pthreads） 位于后台的进程组START 进程启动时间和日期 TIME 进程使用的总cpu时间COMMAND 正在执行的命令行命令 NI 优先级(Nice)PRI 进程优先级编号(Priority)WCHAN 进程正在睡眠的内核函数名称；该函数的名称是从/root/system.map文件中获得的。 FLAGS 与进程相关的数字标识 8.4 fg fg [job…] 把指定的后台作业或挂起作业移到前台运行。 参数job是一个或多个进程的PID，或者 是命令名称，或者是作业号（作业号前面要带一个%号）。 通常在shell中输入命令启动进程后，如果该进程需要与用户交互，那么此后用户的键 盘输入都被该进程读取，直到该进程退出后才出现shell提示符$，这种进程为前台进程。 如果在命令行的末尾加上&amp;字符，则shell为这个命令创建一个后台进程，它虽然也可以 输出到屏幕，但是不能读取键盘输入，不管执行命令的进程有没有退出都立刻回到shell提 示符接受下一条命令的输入。如果该进程也需要读取键盘输入，则被挂起等待直到用户用fg 命令把它变成前台进程。如果一个命令需要较长的处理时间并且不需要与用户交互，就适合 把它放在后台执行。 8.5 bg bg [job…] 把被挂起的进程提到后台执行。 其中，job是一个或多个进程的PID、命令名称或者作 业号，在参数前要带%号。 8.6 kill向指定进程发送信号 kill [ -signal | -s signal ] pid … 查看信号编号 1kill -l [ signal ] 给一个进程发信号，或终止一个进程的运行。 kill命令如果不带参数而直接跟pid，就是发给该进程SIGTERM信号，大部分进程收到该 信号就会终止。但是被挂起的进程不能处理信号，所以必须发SIGKILL信号，由系统强制终 止进程。 8.7env查看当前进程环境变量 1$env vim ∼/.bashrc 配置当前用户环境变量 vim /etc/profile 配置系统环境变量,配置时需要有root权限 用户管理9.1 创建用户1sudo useradd -s /bin/bash -g sihai -d /home/sihai -m sihai sudo useradd -s /bin/sh -g group -G adm,root xwp 此命令新建了一个用户xwp，该用户的登录Shell是/bin/sh，他属于group用户组，同时 又属于adm和root用户组，其中group用户组是其主组。 -s 指定新用户登陆时shell类型 -g 指定所属组，该组必须已经存在 -G 指定附属组，该组必须已经存在 -d 用户家目录 -m 用户家目录不存在时，自动创建该目录 9.2 设置用户组1sudo groupadd sihai 9.3 设置密码1sudo passwd sihai 9.4 切换用户 su 用户名 1su sihai 9.5 root用户变成root用户 1sudo su 设置root密码 1passwd 9.6 删除用户 userdel 选项 用户名 常用的选项是-r，他的作用是把用户的主目录一起删除。 例如： 1sudo userdel -r sihai 此命令删除用户sihai在系统文件（主要是/etc/passwd，/etc/shadow，/etc/ group等）中的记录，同时删除用户的主目录。 网络管理10.1 ifconfig1.查看网卡信息 1ifconfig 2.关闭网卡 1sudo ifconfig eth0 down 3.开启网卡eth0 1sudo ifconfig eth0 up 4.给eth0配置临时IP 1sudo ifconfig eth0 IP 10.2ping ping [选项] 主机名/IP地址 查看网络上的主机是否在工作。它向该主机发送ICMP ECHO_REQUEST包。有时我们想从网络上的某台主机上下载文件，可是又不知道那台主机是否开着，就需要使用ping命令查看。 命令中各选项的含义如下： -c 数目 在发送指定数目的包后停止。-d 设定SO_DEBUG的选项。-f 大量且快速地送网络封包给一台机器，看它的回应。-I 秒数 设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次。-l 次数 在指定次数内，以最快的方式送封包数据到指定机器（只有超级用户可以使用此选项）。-q 不显示任何传送封包的信息，只显示最后的结果。-r 不经由网关而直接送封包到一台机器，通常是查看本机的网络接口是否有问题。-s 字节数 指定发送的数据字节数，预设值是56，加上8字节的ICMP头，一共是64ICMP数据字节。 10.3netstat netstat [选项] 显示网络连接、路由表和网络接口信息，可以让用户得知目前都有哪些网络连接正在运 作。命令中各选项的含义如下： -a 显示所有socket，包括正在监听的。-c 每隔1秒就重新显示一遍，直到用户中断它。-i 显示所有网络接口的信息，格式同“ifconfig -e”。-n 以网络IP地址代替名称，显示出网络连接情形。-r 显示核心路由表，格式同“route -e”。-t 显示TCP协议的连接情况。-u 显示UDP协议的连接情况。-v 显示正在进行的工作。 ####10.4nslookup nslookup name 查询一台机器的IP地址和其对应的域名。它通常需要一台域名服务器来提供域名服务。 如果用户已经设置好域名服务器，就可以用这个命令查看不同主机的IP地址对应的域名。 不带参数使用nslookup命令时，出现提示符“&gt;”，在后面输入要查询的IP地址或域名 并回车即可。如果要退出该命令，输入exit并回车即可。 1234sihai@ubuntu:~$ nslookup&gt; www.sihai.cnServer: 127.0.0.1Address: 127.0.0.1#53 10.5 fingerfinger [-lmsp] user [user@host …] 查询用户的信息，通常会显示系统中某个用 户的用户名、主目录、停滞时间、登录时间、登录shell等信息。如果要查询远程机上的用 户信息，需要在用户名后面接“@主机名”，采用[用户名@主机名]的格式，不过要查询的网 络主机需要运行finger守护进程。 命令中各选项的含义如下： -s 显示用户的注册名、实际姓名、终端名称、写状态、停滞时间、登录时间等信息。-l 除了用-s选项显示的信息外，还显示用户主目录、登录shell、邮件状态等信息，以 及用户主目录下的.plan、.project和.forward文件的内容。-p 除了不显示.plan文件和.project文件以外，与-l选项相同。 1234567sihai@ubuntu:~$ finger sihaiLogin: sihai Name: sihaiDirectory: /home/sihai Shell: /bin/bashOn since Mon Sep 8 08:55 (CST) on tty7 14 hours 48 minutes idle On since Mon Sep 8 21:57 (CST) on pts/1 from :011 minutes 18 seconds idleOn since Mon Sep 8 23:12 (CST) on pts/2 from :0 6 seconds idleNo mail. No Plan. 常用服务器构建11.1 ftp11.1.1ftp服务器1.安装vsftpd服务器 1sudo apt-get install vsftpd 2.配置vsftpd.conf文件 1sudo vi /etc/vsftpd.conf 添加下面设置 1234567anonymous_enable=YES anon_root=/home/sihai/ftp no_anon_password=YES write_enable=YES anon_upload_enable=YES anon_mkdir_write_enable=YES anon_umask=0022 3.重启服务器，重新加载/etc/vsftpd.conf配置文件 123456ubuntu12.04下sudo /etc/init.d/vsftpd restartubuntu14.04下sudo /lib/init/upstart-job vsftpd restart 4.进入你的/home/sihai/ftp目录下创建一个空目录，供用户上传 123cd ~/ftpmkdir anonymous chmod 777 anonymous 5.测试上传功能，登陆ftp服务器，进入到anonymous目录 12ftp IPcd anonymous 6.上传命令，可以把你当前目录下的文件上传到ftp服务器的anonymous目录 12put somefile get somefile 11.1.2 ftp客户端Ubuntu 默认已经安装ftp客户端 11.1.3 lftp客户端lftp 也 是 一 种 ftp 客 户 程 序。 它 是 以 文 本 方 式 操 作 的， 但 是 比 起 图 形 界 面 更 为 方 便。lftp几乎具有bash的所有方便功能，Tab 补全，bookmark, queue, 后台下载等可以 得到支持。用法与ftp类似，主要的指令如下： put 上传文件mput 上传多个文件 get 下载文件mget 下载多个文件mirror 下载整个目录及其子目录 mirror –R 上传整个目录及其子目录!command 调用本地shell执行命令command 注意，有的发行版可能缺省没有安装lftp工具，需要用户自己安装。如果是Debian或 Ubuntu系统，则安装lftp软件包。 1sudo apt-get install lftp 11.2 nfs1.安装nfs服务器 1sudo apt-get install nfs-kernel-server 2.设置/etc/exports配置文件 1sudo vi /etc/exports 添加这行配置 1/home/用户名/nfs *(rw,sync,no_root_squash) 3.在用户目录下创建nfs目录 1mkdir /home/用户名/nfs 4.重启服务器，重新加载配置文件 1sudo /etc/init.d/nfs-kernel-server restart 5.在/home/用户名/nfs目录下创建测试文件hello 1cd /home/用户名/nfs touch hello 6.测试服务器，把服务器共享目录nfs挂在到/mnt节点 1sudo mount -t nfs -o nolock -o tcp IP:/home/用户名/nfs /mnt 7.进入/mnt目录可以看到hello文件，表示构建成功 8.卸载网络共享目录 1sudo umount /mnt 11.3ssh1.安装ssh服务器 1sudo apt-get install openssh-server 2.远程登陆 1ssh 用户名@IP 其它命令12.1 终端翻页12Shift-pageup Shift-pagedown 12.2 man看手册(叫做manual或man page)。每一个命令和系统函数都有自己的man page。 12man manman read 查看read命令的man page 1man 2 read 查看read系统函数的man page(在第二个section中，表示为read(2)) man -k read 以read为关键字查找相关的man page 12.3 clear清屏。使光标和提示符回到屏幕第一行。 快捷键：Ctrl-l ####12.4 aliasalias [-p] name=value … 将 value 字 符 串 起 个 别 名 叫 name， 以 后 在 命 令 行 输 入 name，shell 自 动 将 其 解 释 为value，如果不带参数执行本命令，或以参数-p执行，则显示当前定义的别名列表。 12$ aliasalias ls='ls --color=auto' alias rm='rm -i' 12.5 echo echo [-n] 字符串 在显示器上显示一段文字，一般起到一个提示的作用。其中选项n表示输出文字后不换 行；字符串可以加引号，也可以不加引号。用echo命令输出加引号的字符串时，将字符串原 样输出；用echo命令输出不加引号的字符串时，将字符串中的各个单词作为字符串输出，各 字符串之间用一个空格分割。 查看上一个程序退出数值，正常情况程序退出值是0 1echo $? 12.6 date查看当前时间 12.7 umask umask [-p] -S [mode] umask指定用户创建文件时的掩码，其中的mode和chmod的命令中的格式一样。如果不用 mode参数，则显示当前的umask设置。如果用-S参数，则以符号形式显示设置。 12$ umask 0022$ umask -S u=rwx,g=rx,o=rx 比如该用户touch或gedit创建一个文件，则其默认权限为-rw-r-r–，如果该用户创 建一个可执行文件(比如编译生成的程序)，则其默认权限为-rwxr-xr-x。也就是说，由于 umask的设定，创建的文件默认是不具有g的w权限和o的w权限的，除非用chmod更改权限。 12.8 创建终端创建终端标签 1Ctrl + Shift + t 切换标签 1Alt+n（n=1） 新开终端 1Ctrl + Shift + n 关机重启关机重启这些操作都需要有root权限 13.1 poweroff13.2 shutdown shutdown -t 秒数 [-rkhncfF] 时间 [警告讯息] 选项： -t 秒数 : 设定在切换至不同的runlevel之前, 警告和删除二讯号之间的延迟时间(秒).-k : 仅送出警告讯息文字, 但不是真的要 shutdown.-r : shutdown 之後重新开机-h : shutdown 之後关机.-n : 不经过 init , 由 shutdown 指令本身来做关机动作.(不建议你用)-f : 重新开机时, 跳过 fsck 指令, 不检查档案系统.-F : 重新开机时, 强迫做 fsck 检查.-c : 将已经正在 shutdown 的动作取消. 例子: 1234shutdown -r now 立刻重新开机 shutdown -h now 立刻关机shutdown -k now 'Hey! Go away! now....' 发出警告讯息, 但没有真的关机 shutdown -t3 -r now 立刻重新开机, 但在警告和删除processes 之间, 延迟3秒钟. shutdown -h 10:42 'Hey! Go away!' 10:42 分关机shutdown -r 10 'Hey! Go away!' 10 分钟後关机shutdown -c 将刚才下的 shutdown 指令取消,必须切换至其它tty, 登入之後, 才能下此一指令. shutdown now 切换至单人操作模式(不加任何选项时) 注意事项:时间参数务必要加: 不是用 now, 便是用 hh:mm 或 mm now 其实就是 0 的意思. 13.3 reboot13.4 查看内核版本信息1uname -a 13.5 查看发行版信息1lsb_release -a 13.6 查看空闲内存1free -m vim16.1 vi简介vi是“Visual interface”的简称，它在Linux上的地位就仿佛Edit程序在DOS上一样。 它可以执行输出、删除、查找、替换、块操作等众多文本操作，而且用户可以根据自己的需 要对其进行定制。Vi不是一个排版程序，它不象Word或WPS那样可以对字体、格式、段落等 其他属性进行编排，它只是一个文本编辑程序。 vi没有菜单，只有命令，且命令繁多。 Vi有三种基本工作模式： 命令模式 文本输入模式 末行模式。 16.1.1 命令行模式任何时候，不管用户处于何种模式，只要按一下ESC键，即可使Vi进入命令模式；我们 在shell环境(提示符为$)下输入启动Vi命令，进入编辑器时，也是处于该模式下。在该模式 下，用户可以输入各种合法的Vi命令，用于管理自己的文档。此时从键盘上输入的任何字符 都被当做编辑命令来解释，若输入的字符是合法的Vi命令，则Vi在接受用户命令之后完成相 应的动作。但需注意的是，所输入的命令并不在屏幕上显示出来。若输入的字符不是Vi的合 法命令，Vi会响铃报警。 16.1.2 文本输入模式在命令模式下输入插入命令i、附加命令a 、打开命令o、修改命令c、取代命令r或替换 命令s都可以进入文本输入模式。在该模式下，用户输入的任何字符都被Vi当做文件内容保 存起来，并将其显示在屏幕上。在文本输入过程中，若想回到命令模式下，按键ESC即可。 16.1.3 末行模式末行模式也称ex转义模式。在命令模式下，用户按“:”键即可进入末行模式下，此时 Vi会在显示窗口的最后一行(通常也是屏幕的最后一行)显示一个“:”作为末行模式的提示 符，等待用户输入命令。多数文件管理命令都是在此模式下执行的(如把编辑缓冲区的内容 写到文件中等)。末行命令执行完后，Vi自动回到命令模式。例如： 1:sp newfile 则分出一个窗口编辑newfile文件。如果要从命令模式转换到编辑模式，可以键入命令a 或者i；如果需要从文本模式返回，则按Esc键即可。在命令模式下输入“:”即可切换到末 行模式，然后输入命令。 16.2 vim基础操作进入插入模式: i: 插入光标前一个字符 I: 插入行首a: 插入光标后一个字符 A: 插入行未o: 向下新开一行,插入行首 O: 向上新开一行,插入行首 进入命令模式: ESC:从插入模式或末行模式进入命令模式 移动光标: h: 左移 j: 下移 k: 上移 l: 右移M: 光标移动到中间行L: 光标移动到屏幕最后一行行首 G: 移动到指定行,行号 -Gw: 向后一次移动一个字 b: 向前一次移动一个字{: 按段移动,上移}: 按段移动,下移 Ctr-d: 向下翻半屏 Ctr-u: 向上翻半屏 Ctr-f: 向下翻一屏 Ctr-b: 向上翻一屏gg: 光标移动文件开头 G: 光标移动到文件末尾 删除命令: x: 删除光标后一个字符,相当于 DelX: 删除光标前一个字符,相当于 Backspacedd: 删除光标所在行,n dd 删除指定的行数 D: 删除光标后本行所有内容,包含光标所在字符 d0: 删除光标前本行所有内容,不包含光标所在字符dw: 删除光标开始位置的字,包含光标所在字符 撤销命令: u: 一步一步撤销U: 一次性撤销当前行所作的所有操作 Ctr-r: 反撤销 重复命令: .: 重复上一次操作的命令 文本行移动: : 文本行右移 &lt;&lt;: 文本行左移 复制粘贴: yy: 复制当前行,n yy 复制 n 行p: 在光标所在位置向下新开辟一行,粘贴 可视模式: v: 按字符移动,选中文本V: 按行移动,选中文本可视模式可以配合 d, y, &gt;&gt;, &lt;&lt; 实现对文本块的删除,复制,左右移动 替换操作: r: 替换当前字符R: 替换当前行光标后的字符 查找命令: /: str查找n: 下一个N：上一个 替换命令： 把abc全部替换成123 1:%s/abc/123/g 代码排版: gg=G: 代码自动缩进排版 16.3 vim分屏操作分屏操作: sp: 上下分屏,后可跟文件名vsp: 左右分屏,后可跟文件名Ctr+w+w: 在多个窗口切换 启动分屏 1.使用大写O参数进行垂直分屏 1$ vim -On file1 file2 ... 2.使用小写o参数进行水平分屏 1$ vim -on file1 file2 ... 注: n是数字，表示分屏的数量,n要大于等于文件个数 关闭分屏 1.关闭当前窗口 1ctrl+w c 2.关闭当前窗口，如果只剩最后一个，则退出vim 1ctrl+w q 编辑中分屏 1.上下分割当前打开的文件 1ctrl+w s 2.上下分割，并打开一个新的文件 1:sp filename 3.左右分割当前打开的文件 1ctrl+w v 4.左右分割，并打开一个新的文件 1:vsp filename 分屏编辑中光标的移动 vi中的光标键是h,j,k,l,要在各个屏之间切换，只需要先按一下ctrl+w 1.把光标移动到上边的屏 1ctrl+w k 2.把光标移动到下边的屏 1ctrl+w j 3.把光标移动到右边的屏 1ctrl+w l 4.把光标移动到左边的屏 1ctrl+w h 5.把光标移动到下一个的屏 1ctrl+w w 移动分屏 1.向上移动 1ctrl+w K 2.向下移动 1ctrl+w J 3.向右移动 1ctrl+w L 4.向左移动 1ctrl+w H 屏幕尺寸 1.增加高度 1ctrl+w + 2.减少高度 1ctrl+w - 3.让所有屏的高度一致 1ctrl+w = 4.左加宽度 1ctrl+w &gt; 5.右加宽度 1ctrl+w &lt; 6.右增加n宽 (如：n=30) 1ctrl+w n &lt;","link":"/2020/03/07/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"Diary","text":"Diary 2020年4月20日红了樱桃，绿了芭蕉。终于，终于忙完了家里的事。也算是给自己放空的机会，去小寨摘樱桃。见到了许久不见的老友，一起吹风，一路欢歌来到了小寨。没想到樱桃还不怎么熟透，扎心了，进园子里随便摘了几颗便出来了，打算过一久又去。回来聚聚餐，玩玩游戏，各自回家。 哎~原本可以回来做做事情，无心继续。我陷入了对人生的大思考。我越来越发现我也是一个完美主义者，就像罗永浩一样，想得很美，做起来难；什么东西都想尝试，都想做好，做出的结果却，，，无论是做事还是感情！这是我的性格使然。再好的亲情，再好的友情都需要时间去培养和灌溉。我尽力再做，错过的人，错过的事, I am sorry but I love you. 我相信时间会给出答案，即使生命到达不了那一天。 疫情让我们懂得，什么应该放弃，什么应该去坚持，什么应该去铭记。以前的我，总是喜欢把自己的想法强加于人，殊不知这是一种不成熟，无知的体现。每个人都有自己的信仰和价值观，并以此来看待这个世界，采取不一样的态度和行为去对待身边所发生的事。尊重可能是最好的办法。 结束了一周的黑暗时刻，应该让自己的生活步入正轨。可能马上就要开学，马上要交的报告，简直了，裂开。立个flag, 20天在项目上做出个样子来，不能再拖了，奥力给。","link":"/2020/04/20/Diary/"},{"title":"windows系统重装","text":"今天帮好朋友重装系统。总结一下收获吧。简单记录一下 重装系统U盘制作工具有很多方法，例如： 一、借助工具制作 大白菜一键U盘装系统，小白一键装系统等等， 其中大白菜在多数人中的呼声更高。 今天尝试了一下，好像也还行， 不足就是也有捆绑软件在里面携带安装 包括360全家桶，腾讯视频等（对作者表示理解，这些软件安装后可以自行删除即可）注：不建议用小白重装系统弄，亲测不好用 制作U盘启动盘 很详细的教程，照着做绝对没问题 二、window纯净安装原版系统 找到官网 点击下载 剩下的就很简单了，一步一步往下走就好。 如果不懂的可以看看视频教程 win10小技巧： 屏幕键盘：win+r 输入osk 截图： win+shift+s 远程协助：快速助手，远程桌面","link":"/2020/03/29/windows%E7%B3%BB%E7%BB%9F%E9%87%8D%E8%A3%85/"},{"title":"windows软件不完全攻略","text":"希望你喜欢 老实说，这个主题的文章，是我想了好久的idea，但是明显会显得片面，这仅仅代表我个人主观感受。最后想到，其实阅读我文章的受众基本没有。基于此，我想着写写自己的感受，以便未来要是自己的电脑出点问题的话，也方便自己极快找回曾经喜欢的软件。 一、 好看的1、TranslucentTBTranslucentTB是一款调整windows系统底部状态栏颜色的软件。 效果 下载地址 2、腾讯电脑桌面管家这是一款桌面整理的桌面，软件小但是功能强大。话不多说，直接上图。 效果： 下载地址 3、系统自带主题设置，个性化很多人都不怎么喜欢的设置这个，其实配合的好的话。天天玩电脑都不厌呐。 ps: windows的深色主题是真的舒服 4、壁纸除了腾讯桌面管理管家自带的壁纸获取，自己也收集了一些相当有feeling的壁纸 下载地址 提取码：e3ii 二、实用的这个其实很难推荐，每个人专业不一，需求也不同。我就推荐一下比较大众的但不太流行的。 1、有道云笔记一款多端同步记录自己学习记录的云笔记。同时最主要的是支持markdown语法的云笔记，很强大，谁用谁知道。界面UI也是相当养人眼。 下载地址 2、有道词典没错，还是网易的，有道词典。功能，，，见下图。适合经常需要读英文文献的朋友。 下载地址 3、Simple Sticky Notes你有没有一种每次打开电脑，瞬间失忆，不知道自己的工作做到了那里。这款几兆的小软件可以满足你的需求。让其每次跟随系统启动，每次打开电脑都能够看到自己应该从那里开始做起。 下载地址 4、ShareX一款花样截图的软件，虽然QQ自带了截图工具，但是这款软件会比较全。 下载地址 5、迅雷迅雷是一款下载加速的软件，只是到了某些人手里就变成了种子的聚集地。:accept: 虽然可以找到破解版，但是普通用户的下载速度也不是一般的啊~ 下载地址 6、IDM一款网页下载神器，会嗅探网页中的视频和音频等。 破解版下载地址提取码：x5wt 7、PDF编辑神器还是直接上图吧，多说无益，自我体验才发现其中之秒。 破解版下载地址提取码：tlj6 8、谷歌浏览器由于需要访问谷歌官网，我帮你们下载好了，设置主题颜色就很好看。 下载地址提取码：96u4 9、插件有朋友说谷歌浏览器跟其他的浏览器也没什么区别嘛。这话是对的，缺少插件的谷歌浏览器与其他浏览器没有太多差别。 用谷歌浏览器打开： 下载地址 安全的火绒安全国内市面上比较出名的莫过于360安全管家和腾讯电脑管家。360比较遭受人们的诟病，为什么呢？因为很多小白安装了360。360很厉害，在国内计算机安全做得也是顶尖的，但是，360捆绑了很多360全家桶，而且自动开启，所以导致系统运行速度变慢。而火绒安全则是一款非常非常良心的软件，而且功能强大 安全工具需要用户点击下载组件，需要什么就下载什么。强卸载恶意软件，极度清理垃圾都是非常高效。 下载地址 ps: 部分连接是百度网盘分享的连接，有下载时限，需要的得赶紧保存。若连接失效，可以联系我。你用过哪些好用的软件呢？有意的话发邮件给我哟 版权所有, 侵权必究 转载需联系我：:email:alanxintop@163.com","link":"/2020/05/09/windows%E8%BD%AF%E4%BB%B6%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%94%BB%E7%95%A5/"},{"title":"三体经典语录","text":"弱小和无知，不是生存的障碍，傲慢才是 1、你的无畏来源于无知。 2、孩子问，他们是烈士吗？妈妈说，不是。他们是敌人吗？不是，那他们是什么？他们是历史！ 3、死亡是一座永恒的灯塔，不管你驶向何方，最终都会朝它转向。一切都将逝去，只有死神永生。 4、我们都是阴沟里的虫子,但总还是得有人仰望星空。 5、弱小和无知，不是生存的障碍，傲慢才是。 6、碑是那么小，与其说是为了纪念，更像是为了忘却。 7、人生的美妙之处在于迷上一样东西。人生苦短，少做些虚无缥缈的事。 8、记忆是一条早已干涸的河流，只在毫无生气的河床中剩下零落的砾石。 9、夜晚的灯塔一直都在，只是灯亮的时候，你才看见它。 10、城市就是森林，每一个男人都是猎手，每一个女人都是陷阱。 11、要知道，一个文学人物十分钟的行为，可能是她十年的经历的反映。 12、知道在哪儿，世界就变得像一张地图那么小了；不知道在哪儿，感觉世界才广阔。 13、西方人并不比东方人聪明，但是他们却找对了路。 14、空不是无，空是一种存在，你得用空这种存在填满自己。 15、没有救世的能力不是你的错，但给世界以希望后又打碎它就是一种不可饶恕的罪恶了。 16、越透明的东西越神秘，宇宙本身就是透明的，只要目力能及，你想看多远就看多远，但越看越神秘。 17、大多数人到死都没有向尘世之外瞥一眼。 18、限长的曲线就是宇宙的抽象，一头连着无限的过去，另一头连着无限的未来，中间只有无规律无生命的随机起伏，一个个高低错落的波峰就像一粒粒大小不等的沙子，整条曲线就像是所有沙粒排成行形成的一维沙漠，荒凉寂寥，长得更令人无法忍受。你可以沿着它向前向后走无限远，但永远找不到归宿。 19、如果说，有上帝的话。人类一思考，上帝就发笑，如果人类不思考，上帝连发笑都不屑于。 20、没有什么能永远存在，即使是宇宙也有灭亡的那一天，凭什么人类就觉得自己该永远存在下去。 21、在这寒冷无际的草原间，燃烧是无意义的，一腔热血喷出来，比一堆牛粪凉的更快，还不如后者有实用价值。但燃烧是他们的命运，他们是燃烧的一代。 22、仅靠生存本身是不能保证生存的，发展才是生存的最好保障。 23、他们的宇宙还很年轻，他们的神还只是个孩子。现在评断他们还为时过早，当‘我们’在‘末日’回去的时候，会决定谁该被拯救。 24、在黑暗中沉淀出了重元素，所以光明不是文明的母亲，黑暗才是。 25、上帝是个无耻的老赌徒，他抛弃了我们！ 26、实际上没有毁掉什么……就像一副牌，只是重洗了……可生命就像是一手同花顺，一洗就什么都没了。以后再也不会有这么好的牌了。 27、在宇宙中，你再快都有比你更快的，你再慢也有比你更慢的。 28、既没有入世的能力也没有出世的资本——说的是某一个人，不过却很具有普遍性。 29、在意义之塔上，生存高于一切，面对生存，任何低熵体都只能两害相权取其轻。 30、活着本身就很美妙，如果连这道理都不懂，怎么去探索更深的东西呢？","link":"/2020/03/21/%E4%B8%89%E4%BD%93%E7%BB%8F%E5%85%B8%E8%AF%AD%E5%BD%95/"},{"title":"使用nginx在阿里云服务器部署hexo博客","text":"nginx安装部署 一早大阿狸发消息给我说域名的问题： 后面了解到，原来是在大阿狸卖的域名得解析到大阿狸，原本我的博客是在github静态博客，github静态博客在国内访问速度真的慢，又没有加速。今天刚好把它部署到阿里云。 使用到了 nginx+hexo . 使用前先更新一下apt，不然后面安装nginx可能会出现问题： 1apt-get update 安装nginx: 1apt-get install nginx 安装成功后，检查是否安装成功： 1nginx -v ok,启动nginx: 1service nginx start 在浏览器输入服务器公网IP，即可看到nginx初始页面。 这里网上的配置跟我的不一样，我直接查看默认配置文件没有修改nginx.conf：查看默认配置： 由上图可知：nginx默认配置是访问到/var/www/html中的文件，所以把hexo博客里的public文件夹下的文件全部上传到该目录下。然后 12service nginx stopservice nginx start 完美 接下来的事就简单了： 域名解析到IP地址 以及 以后更新文章，直接把public里的文件上传到html文件夹下。 附：Nginx极简教程（快速入门） 作者：**dunwu** 链接：**https://github.com/dunwu/nginx-tutorial** 本项目是一个 Nginx 极简教程，目的在于帮助新手快速入门 Nginx。 示例Demo： https://github.com/dunwu/nginx-tutorial/tree/master/demos Demo目录中的示例模拟了工作中的一些常用实战场景，并且都可以通过脚本一键式启动，让您可以快速看到演示效果。 简介什么是 Nginx? Nginx (engine x) 是一款轻量级的 Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。 什么是反向代理？ 反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。 Nginx 入门详细安装方法请参考： https://github.com/dunwu/nginx-tutorial/blob/master/install-nginx.md nginx 的使用比较简单，就是几条命令。 常用到的命令如下： 12345678nginx -s stop 快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。nginx -s quit 平稳关闭Nginx，保存相关信息，有安排的结束web服务。nginx -s reload 因改变了Nginx相关配置，需要重新加载配置而重载。nginx -s reopen 重新打开日志文件。nginx -c filename 为 Nginx 指定一个配置文件，来代替缺省的。nginx -t 不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。nginx -v 显示 nginx 的版本。nginx -V 显示 nginx 的版本，编译器版本和配置参数。 如果不想每次都敲命令，可以在 nginx 安装目录下新添一个启动批处理文件startup.bat，双击即可运行。内容如下： 123456789101112@echo offrem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程nginx.exe -s stoprem 测试配置文件语法正确性nginx.exe -t -c conf/nginx.confrem 显示版本信息nginx.exe -vrem 按照指定配置去启动nginxnginx.exe -c conf/nginx.conf 如果是运行在 Linux 下，写一个 shell 脚本，大同小异。 Nginx 实战我始终认为，各种开发工具的配置还是结合实战来讲述，会让人更易理解。 Http 反向代理我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。 nginx.conf 配置文件如下： 注：conf/nginx.conf 是 nginx 的默认配置文件。你也可以使用 nginx -c 指定你的配置文件\\ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#运行用户#user somebody;#启动进程,通常设置成和cpu的数量相等worker_processes 1;#全局错误日志error_log D:/Tools/nginx-1.10.1/logs/error.log;error_log D:/Tools/nginx-1.10.1/logs/notice.log notice;error_log D:/Tools/nginx-1.10.1/logs/info.log info;#PID文件，记录当前启动的nginx的进程IDpid D:/Tools/nginx-1.10.1/logs/nginx.pid;#工作模式及连接数上限events { worker_connections 1024; #单个后台worker process进程的最大并发链接数}#设定http服务器，利用它的反向代理功能提供负载均衡支持http { #设定mime类型(邮件支持类型),类型由mime.types文件定义 include D:/Tools/nginx-1.10.1/conf/mime.types; default_type application/octet-stream; #设定日志 log_format main '[$remote_addr] - [$remote_user] [$time_local] &quot;$request&quot; ' '$status $body_bytes_sent &quot;$http_referer&quot; ' '&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;'; access_log D:/Tools/nginx-1.10.1/logs/access.log main; rewrite_log on; #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用， #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime. sendfile on; #tcp_nopush on; #连接超时时间 keepalive_timeout 120; tcp_nodelay on; #gzip压缩开关 #gzip on; #设定实际的服务器列表 upstream zp_server1{ server 127.0.0.1:8089; } #HTTP服务器 server { #监听80端口，80端口是知名端口号，用于HTTP协议 listen 80; #定义使用www.xx.com访问 server_name www.helloworld.com; #首页 index index.html #指向webapp的目录 root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebapp; #编码格式 charset utf-8; #代理配置参数 proxy_connect_timeout 180; proxy_send_timeout 180; proxy_read_timeout 180; proxy_set_header Host $host; proxy_set_header X-Forwarder-For $remote_addr; #反向代理的路径（和upstream绑定），location 后面设置映射的路径 location / { proxy_pass http://zp_server1; } #静态文件，nginx自己处理 location ~ ^/(images|javascript|js|css|flash|media|static)/ { root D:_WorkspaceProjectgithubzpSpringNotesspring-securityspring-shirosrcmainwebappiews; #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。 expires 30d; } #设定查看Nginx状态的地址 location /NginxStatus { stub_status on; access_log on; auth_basic &quot;NginxStatus&quot;; auth_basic_user_file conf/htpasswd; } #禁止访问 .htxxx 文件 location ~ /.ht { deny all; } #错误处理页面（可选择性配置） #error_page 404 /404.html; #error_page 500 502 503 504 /50x.html; #location = /50x.html { # root html; #} }} 好了，让我们来试试吧： 启动 webapp，注意启动绑定的端口要和 nginx 中的 upstream 设置的端口保持一致。 更改 host：在 C:WindowsSystem32driversetc 目录下的 host 文件中添加一条 DNS 记录127.0.0.1 www.helloworld.com 启动前文中 startup.bat 的命令 在浏览器中访问 www.helloworld.com，不出意外，已经可以访问了。 Https 反向代理一些对安全性要求比较高的站点，可能会使用 HTTPS（一种使用 ssl 通信标准的安全 HTTP 协议）。 这里不科普 HTTP 协议和 SSL 标准。但是，使用 nginx 配置 https 需要知道几点： HTTPS 的固定端口号是 443，不同于 HTTP 的 80 端口 SSL 标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key 其他和 http 反向代理基本一样，只是在 Server 部分配置有些不同。 12345678910111213141516171819202122232425#HTTP服务器server { #监听443端口。443为知名端口号，主要用于HTTPS协议 listen 443 ssl; #定义使用www.xx.com访问 server_name www.helloworld.com; #ssl证书文件位置(常见证书文件格式为：crt/pem) ssl_certificate cert.pem; #ssl证书key位置 ssl_certificate_key cert.key; #ssl配置参数（选择性配置） ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; #数字签名，此处使用MD5 ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / { root /root; index index.html index.htm; }} 负载均衡前面的例子中，代理仅仅指向一个服务器。 但是，网站在实际运营过程中，大部分都是以集群的方式运行，这时需要使用负载均衡来分流。nginx 也可以实现简单的负载均衡功能。 假设这样一个应用场景：将应用部署在 192.168.1.11:80、192.168.1.12:80、192.168.1.13:80 三台 linux 环境的服务器上。网站域名叫 www.helloworld.com，公网 IP 为 192.168.1.11。在公网 IP 所在的服务器上部署 nginx，对所有请求做负载均衡处理（下面例子中使用的是加权轮询策略）。 nginx.conf 配置如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748http { #设定mime类型,类型由mime.type文件定义 include /etc/nginx/mime.types; default_type application/octet-stream; #设定日志格式 access_log /var/log/nginx/access.log; #设定负载均衡的服务器列表 upstream load_balance_server { #weigth参数表示权值，权值越高被分配到的几率越大 server 192.168.1.11:80 weight=5; server 192.168.1.12:80 weight=1; server 192.168.1.13:80 weight=6; } #HTTP服务器 server { #侦听80端口 listen 80; #定义使用www.xx.com访问 server_name www.helloworld.com; #对所有请求进行负载均衡请求 location / { root /root; #定义服务器的默认网站根目录位置 index index.html index.htm; #定义首页索引文件的名称 proxy_pass http://load_balance_server ;#请求转向load_balance_server 定义的服务器列表 #以下是一些反向代理的配置(可选择性配置) #proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP proxy_set_header X-Forwarded-For $remote_addr; proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时) proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时) proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时) proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传 client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数 } }} 负载均衡策略Nginx 提供了多种负载均衡策略，让我们来一一了解一下： 负载均衡策略在各种分布式系统中基本上原理一致，对于原理有兴趣，不妨参考： https://dunwu.github.io/javaweb/#/theory/load-balance 轮询123456upstream bck_testing_01 { # 默认所有服务器权重为 1 server 192.168.250.220:8080 server 192.168.250.221:8080 server 192.168.250.222:8080} 加权轮询12345upstream bck_testing_01 { server 192.168.250.220:8080 weight=3 server 192.168.250.221:8080 # default weight=1 server 192.168.250.222:8080 # default weight=1} 最少连接12345678upstream bck_testing_01 { least_conn; # with default weight for all (weight=1) server 192.168.250.220:8080 server 192.168.250.221:8080 server 192.168.250.222:8080} 加权最少连接1234567upstream bck_testing_01 { least_conn; server 192.168.250.220:8080 weight=3 server 192.168.250.221:8080 # default weight=1 server 192.168.250.222:8080 # default weight=1} IP Hash12345678910upstream bck_testing_01 { ip_hash; # with default weight for all (weight=1) server 192.168.250.220:8080 server 192.168.250.221:8080 server 192.168.250.222:8080} 普通 Hash12345678910upstream bck_testing_01 { hash $request_uri; # with default weight for all (weight=1) server 192.168.250.220:8080 server 192.168.250.221:8080 server 192.168.250.222:8080} 网站有多个 webapp 的配置当一个网站功能越来越丰富时，往往需要将一些功能相对独立的模块剥离出来，独立维护。这样的话，通常，会有多个 webapp。 举个例子：假如 www.helloworld.com 站点有好几个 webapp，finance（金融）、product（产品）、admin（用户中心）。访问这些应用的方式通过上下文(context)来进行区分: www.helloworld.com/finance/ www.helloworld.com/product/ www.helloworld.com/admin/ 我们知道，http 的默认端口号是 80，如果在一台服务器上同时启动这 3 个 webapp 应用，都用 80 端口，肯定是不成的。所以，这三个应用需要分别绑定不同的端口号。 那么，问题来了，用户在实际访问 www.helloworld.com 站点时，访问不同 webapp，总不会还带着对应的端口号去访问吧。所以，你再次需要用到反向代理来做处理。 配置也不难，来看看怎么做吧： 1234567891011121314151617181920212223242526272829303132333435http { #此处省略一些基本配置 upstream product_server{ server www.helloworld.com:8081; } upstream admin_server{ server www.helloworld.com:8082; } upstream finance_server{ server www.helloworld.com:8083; } server { #此处省略一些基本配置 #默认指向product的server location / { proxy_pass http://product_server; } location /product/{ proxy_pass http://product_server; } location /admin/ { proxy_pass http://admin_server; } location /finance/ { proxy_pass http://finance_server; } }} 静态站点有时候，我们需要配置静态站点(即 html 文件和一堆静态资源)。 举例来说：如果所有的静态资源都放在了 /app/dist 目录下，我们只需要在 nginx.conf 中指定首页以及这个站点的 host 即可。 配置如下： 123456789101112131415161718192021222324252627worker_processes 1;events { worker_connections 1024;}http { include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; gzip on; gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png; gzip_vary on; server { listen 80; server_name static.zp.cn; location / { root /app/dist; index index.html; #转发任何请求到 index.html } }} 然后，添加 HOST： 127.0.0.1 static.zp.cn 此时，在本地浏览器访问 static.zp.cn ，就可以访问静态站点了。 搭建文件服务器有时候，团队需要归档一些数据或资料，那么文件服务器必不可少。使用 Nginx 可以非常快速便捷的搭建一个简易的文件服务。 Nginx 中的配置要点： 将 autoindex 开启可以显示目录，默认不开启。 将 autoindex_exact_size 开启可以显示文件的大小。 将 autoindex_localtime 开启可以显示文件的修改时间。 root 用来设置开放为文件服务的根路径。 charset 设置为 charset utf-8,gbk;，可以避免中文乱码问题（windows 服务器下设置后，依然乱码，本人暂时没有找到解决方法）。 一个最简化的配置如下： 1234567891011autoindex on;# 显示目录autoindex_exact_size on;# 显示文件大小autoindex_localtime on;# 显示文件时间server { charset utf-8,gbk; # windows 服务器下设置后，依然乱码，暂时无解 listen 9050 default_server; listen [::]:9050 default_server; server_name _; root /share/fs;} 解决跨域web 领域开发中，经常采用前后端分离模式。这种模式下，前端和后端分别是独立的 web 应用程序，例如：后端是 Java 程序，前端是 React 或 Vue 应用。 各自独立的 web app 在互相访问时，势必存在跨域问题。解决跨域问题一般有两种思路： CORS 在后端服务器设置 HTTP 响应头，把你需要允许访问的域名加入 Access-Control-Allow-Origin 中。 jsonp 把后端根据请求，构造 json 数据，并返回，前端用 jsonp 跨域。 这两种思路，本文不展开讨论。 需要说明的是，nginx 根据第一种思路，也提供了一种解决跨域的解决方案。 举例：www.helloworld.com 网站是由一个前端 app ，一个后端 app 组成的。前端端口号为 9000， 后端端口号为 8080。 前端和后端如果使用 http 进行交互时，请求会被拒绝，因为存在跨域问题。来看看，nginx 是怎么解决的吧： 首先，在 enable-cors.conf 文件中设置 cors ： 1234567891011121314151617181920212223242526# allow origin listset $ACAO '*';# set single originif ($http_origin ~* (www.helloworld.com)$) { set $ACAO $http_origin;}if ($cors = &quot;trueget&quot;) { add_header 'Access-Control-Allow-Origin' &quot;$http_origin&quot;; add_header 'Access-Control-Allow-Credentials' 'true'; add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS'; add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';}if ($request_method = 'OPTIONS') { set $cors &quot;${cors}options&quot;;}if ($request_method = 'GET') { set $cors &quot;${cors}get&quot;;}if ($request_method = 'POST') { set $cors &quot;${cors}post&quot;;} 接下来，在你的服务器中 include enable-cors.conf 来引入跨域配置： 12345678910111213141516171819202122232425262728# ----------------------------------------------------# 此文件为项目 nginx 配置片段# 可以直接在 nginx config 中 include（推荐）# 或者 copy 到现有 nginx 中，自行配置# www.helloworld.com 域名需配合 dns hosts 进行配置# 其中，api 开启了 cors，需配合本目录下另一份配置文件# ----------------------------------------------------upstream front_server{ server www.helloworld.com:9000;}upstream api_server{ server www.helloworld.com:8080;}server { listen 80; server_name www.helloworld.com; location ~ ^/api/ { include enable-cors.conf; proxy_pass http://api_server; rewrite &quot;^/api/(.*)$&quot; /$1 break; } location ~ ^/ { proxy_pass http://front_server; }} 到此，就完成了。","link":"/2020/04/23/%E4%BD%BF%E7%94%A8nginx%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2hexo%E5%8D%9A%E5%AE%A2/"},{"title":"小程序之JavaScript","text":"Console.log打印日志: console.log(321*3) console.log打印数组Array: console.log([“肖申克的救赎”,”霸王别姬”,”这个杀手不太冷”,”阿甘正传”,”美丽人生”][3]) console.log打印对象Object: console.log({name: “霸王别姬”,img:”https://img3.doubanio.com/view/photo/s_ratio_poster/public/p1910813120.webp&quot;,desc: “风华绝代。”}.desc) 变量与赋值: let movie={name: “霸王别姬”,img: “https://img3.doubanio.com/view/photo/s_ratio_poster/public/p1910813120.webp&quot;,desc: “风华绝代。”}console.log(movie)console.log(movie.name)通过将复杂的数据信息（数组、对象）赋值给一个变量，代码得到了大大的简化，可以深刻了解到变量是用于存储信息的”容器”。 变量的冲突与覆盖: 声明了一个变量名之后，就不能再次声明这个变量名啦。但是我们却可以给该变量重新赋值 操作数组movielist=[“肖申克的救赎”,”霸王别姬”,”这个杀手不太冷”,”阿甘正传”,”美丽人生”] 分隔符join方法： join方法将数组元素拼接为字符串,以分隔符分割，默认是逗号,分割。console.log(movielist.join(“、”)) 添加数组push方法：console.log(movielist.push(“千与千寻”,”泰坦尼克号”,”辛德勒的名单”,”盗梦空间”,”忠犬八公的故事”)) 移除最后一项pop方法：console.log(movielist.pop()) 操作对象用点表示法访问对象的属性，通过给该属性赋值就能够添加和修改对象的属性的值了 给对象添加属性：直接赋值 删除对象的某个属性： 用delete方法 delete movie.img 更新对象的某个属性： 重新赋值 常量const defaultStyle = { color: ‘#7A7E83’, selectedColor: ‘#3cc51f’, backgroundColor: ‘#ffffff’,} 字符串的操作 123456789101112let lesson=\"云开发技术训练营\";let enname=\"CloudBase Camp\"console.log(lesson.length); //返回字符串的长度console.log(lesson[4]); //返回在指定位置的字符console.log(lesson.charAt(4)); //返回在指定位置的字符console.log(lesson.substring(3,6)); //从索引3开始到6（不包括6）console.log(lesson.substring(4)); //从索引4开始到结束console.log(enname.toLowerCase()); //把一个字符串全部变为小写：console.log(enname.toUpperCase()); //把一个字符串全部变为大写：console.log(enname.indexOf('oud')); //搜索指定字符串出现的位置：console.log(enname.concat(lesson)); //连接两个字符串console.log(lesson.slice(4)); //提取字符串的某个部分，并以新的字符串返回被提取的部分 Math方法 Math是一个内置对象， 它具有数学常数和函数的属性和方法，但它不是一个函数对象。 123456789let x=3,y=4,z=5.001,a=-3,b=-4,c=-5;console.log(Math.abs(b)); //返回b的绝对值console.log(Math.round(z));//返回z四舍五入后的整数console.log(Math.pow(x,y)) //返回x的y次幂console.log(Math.max(x,y,z,a,b,c)); //返回x,y,z,a,b,c的最大值console.log(Math.min(x,y,z,a,b,c));//返回x,y,z,a,b,c的最小值console.log(Math.sign(a)); //返回a是正数还是负数console.log(Math.hypot(x,y)); //返回所有x,y的平方和的平方根 console.log(Math.PI); //返回一个圆的周长与直径的比例，约3.1415 Date对象 123456789console.log(now.getFullYear()); //从 Date 对象以四位数字返回年份。console.log(now.getMonth()); //从 Date 对象返回月份 (0 ~ 11)。console.log(now.getDate()); //从 Date 对象返回一个月中的某一天 (1 ~ 31)。console.log(now.getDay()); //从 Date 对象返回一周中的某一天 (0 ~ 6)。console.log(now.getHours()); //返回 Date 对象的小时 (0 ~ 23)。console.log(now.getMinutes()); //返回 Date 对象的分钟 (0 ~ 59)。console.log(now.getSeconds()); //返回 Date 对象的秒数 (0 ~ 59)。console.log(now.getMilliseconds()); //返回 Date 对象的毫秒(0 ~ 999)。console.log(now.getTime()); //返回 1970 年 1 月 1 日至今的毫秒数。 全局对象 wx是小程序的全局对象，用于承载小程序能力相关API。 https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API eg:获取网络类型技术文档 12345wx.getNetworkType({ success(res) { console.log(res) }}); 获取用户信息技术文档：wx.getUserInfo() 获取设备信息技术文档：wx.getSystemInfo() 页面跳转技术文档：wx.navigateTo() 页面返回技术文档：wx.navigateBack() 显示消息提示框技术文档：wx.showToast() 设置标题技术文档：wx.setNavigationBarTitle() 打开文件选择技术文档：wx.chooseImage() 点击事件事件是视图层到逻辑层的通信方式，当我们点击tap、触摸touch、长按longpress小程序绑定了事件的组件时，就会触发事件，执行逻辑层中对应的事件处理函数。 消息提示框Toast消息提示框是移动端App、H5(WebApp)、小程序经常会使用到的一个交互界面。在tapevent.wxml输入代码： 12 &lt;button type=\"primary\" bindtap=\"toastTap\"&gt;点击弹出消息对话框&lt;/button&gt; 在js里输入以下代码： 1234567toastTap() { wx.showToast({ title: '购买成功',//显示内容，必填 icon: 'success', //sucess , loading , none duration: 2000 //提示延迟的时间，默认为1500毫秒，也就是1.5秒 }) }, 模态对话框技术文档：wx.showModal(Object object) 手机振动 长振动技术文档：wx.vibrateLong() 弹出操作菜单：弹出菜单技术文档：wx.showActionSheet(Object object)](https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showActionSheet.html) 页面路由 页面路由API Navigator open-type值 含义 redirectTo redirect 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。 navigateTo navigate 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。 navigateBack navigateBack 关闭当前页面，返回上一页面或多级页面。 switchTab switchTab 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面 reLaunch reLaunch 关闭所有页面，打开到应用内的某个页面 navigateTo, redirectTo 只能打开非 tabBar 页面。 switchTab 只能打开 tabBar 页面。 reLaunch 可以打开任意页面。 页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。 调用页面路由带的参数可以在目标页面的onLoad中获取。 在前面我们提到bintap是小程序所有组件的公有属性，只有bintap绑定了页面路由切换的事件处理函数，组件是不是Navigator也就不重要了，也就是链接跳转不再是Navigator组件的专利。 注意这里的url的路径，我们使用的是相对于小程序根目录的绝对路径。app.json的pages配置项前面没有/是因为app.json本来就在根目录，所以可以使用相对路径以及这里的取值，以及API很多参数的字符串String类型的赋值，单引号和双引号都是没有影响的。 返回上一页 返回上一页 12345navigateBack() { wx.navigateBack({ delta: 1 })}, wx.navigateTo 是保留当前页面、跳转到应用内的某个页面，使用 wx.navigateBack可以返回到原页面。对于页面不是特别多的小程序，且页面间存在经常切换时，推荐使用 wx.navigateTo进行跳转， 然后返回，提高加载速度。 页面渲染将变量值渲染到页面 响应的数据绑定data.wxml 123&lt;view style=\"background-color:{{bgcolor}};width:400rpx;height:300rpx;\"&gt;&lt;/view&gt;&lt;button bindtap=\"redTap\"&gt;让背景变红&lt;/button&gt;&lt;button bindtap=\"yellowTap\"&gt;让背景变黄&lt;/button&gt; data.js 123456789101112bgcolor:\"#000000\",redTap:function(){ this.setData({ bgcolor: \"#cd584a\" })},yellowTap:function(){ this.setData({ bgcolor: \"#f8ce5f\" })}, 响应的布尔操作 data.wxml: 123&lt;video id=\"daxueVideo\" src=\"http://wxsnsdy.tc.qq.com/105/20210/snsdyvideodownload?filekey=30280201010421301f0201690402534804102ca905ce620b1241b726bc41dcff44e00204012882540400&amp;bizid=1023&amp;hy=SH&amp;fileparam=302c020101042530230204136ffd93020457e3c4ff02024ef202031e8d7f02030f42400204045a320a0201000400\" autoplay loop muted=\"{{muted}}\" initial-time=\"100\" controls event-model=\"bubble\"&gt;&lt;/video&gt;&lt;button bindtap=\"changeMuted\"&gt;静音和取消静音&lt;/button&gt; data.js: 1234567 muted: true,changeMuted: function (e) { this.setData({ muted: !this.data.muted })}, 响应的数组操作 函数与调用函数 函数的作用，可以写一次代码，然后反复地重用这个代码。JavaScript的函数本身也是对象，因此可以把函数赋值给变量，或者作为参数传递给其他函数。 123function 函数名(参数 1, 参数 2, 参数 3) { 代码块内要执行的语句} 1234function greet() { console.log(\"你好，欢迎来到云开发训练营\");};greet(); //调用greet()函数 对象的方法 在小程序里我们会经常将一个匿名函数赋值给对象的一个属性，而这个属性我们可以称之为对象的方法。 匿名函数 1234let square = function(number) { return number * number};console.log(square(4))//使用console.log()输出变量square 箭头函数 123456const multiply = (x, y) =&gt; { return x * y;}const sum= (x, y) =&gt; x + y;//连{}和return语句都可以省掉console.log(multiply(20, 4));console.log(sum(20, 4)); 在控制台我们可以看到箭头函数打印的结果。箭头函数相当于匿名函数，它没有函数名，而且也简化了函数定义。箭头函数可以只包含一个表达式，甚至连{ … }和return都可以省略掉。 调用对象的方法 点表示法 JavaScript 函数的写法 12345scrollToPosition() {},或yellowTap:function(){}, currentTarget就是事件对象的一个属性，我们可以使用点表示法获取到点击的组件的Id，并将其赋值给activeIndex，所谓active就是激活的意思，也就是我们点击哪个tab，哪个tab就激活。 生命周期:basketball: 获取url参数的生命周期函数onload / 分隔目录和子目录 ? 分隔实际的URL和参数 &amp; URL中指定的参数间的分隔符 = URL中指定的参数的值 # 同一个页面的位置标识符，类似于页面的书签； 数据跨页面 跨页面数据渲染 :basketball:组件携带数据dataset 组件有公有属性和私有属性，这些属性都是数据，事件处理函数可以修改这些属性，从而让组件有丰富的表现形式。 使用JavaScript代替Navigator组件 自定义属性dataset 点击组件显示当前组件其他数据 :basketball:小程序和页面的生命周期 App()函数注册小程序，Page()函数注册小程序中的一个页面，他们都接受的是对象Object类型的参数，包含一些生命周期函数和事件处理函数。App() 必须在 app.js 中调用，必须调用且只能调用一次。开发者可以添加任意的函数或数据变量到 Object参数中，用 this 可以访问。 小程序构造器：App(Object object) 页面构造器：Page(Object object) 使用开发者工具在app.js里给onLaunch、onShow、onHide添加一些打印日志。 123456789onLaunch(opts) { console.log('onLaunch监听小程序初始化。',opts)},onShow(opts) { console.log('onShow监听小程序启动或切前台',opts)},onHide() { console.log('onHide监听小程序切后台')}, onLaunch与onShow onLaunch是监听小程序的初始化，初始化完成时触发，全局只会触发一次，所以在这里我们可以用来执行获取用户登录信息的函数等一些非常核心的数据，如果onLaunch的函数过多，会影响小程序的启动速度。 onShow是在小程序启动，或从后台进入前台显示时触发，也就是它会触发很多次，在这里就不大适合放获取用户登录信息的函数啦。这两者的区别要注意。 :basketball:globalData 这个数据是在app.js里，和我们之前接触到的数据都在页面的js文件里有不同。而且这个用户信息的数据是所有页面都通用的，放在app.js里公用是应该的，但是我们要怎么才能调用到这个数据呢？ globalData对象通常用来存放整个小程序都会使用到的数据，比如我们可以把用户信息赋值给globalData的任意自定义属性。 getApp() 数据表单设置导航栏标题 wx.setNavigationBarTitle() onLoad调用API 12345onLoad: function (options) { wx.setNavigationBarTitle({ title:\"onLoad触发修改的标题\" }) }, button调用API 123456789.wxml&lt;button type=\"primary\" bindtap=\"buttonSetTitle\"&gt;设置标题&lt;/button&gt;.js buttonSetTitle(e){ console.log(e) wx.setNavigationBarTitle({ title: \"button触发修改的标题\" }) }, 使用表单修改标题 小程序一个完整的数据表单收集通常包含一个form组件，一个输入框或选择器组件（比如input组件），一个button组件。 1234&lt;form bindsubmit=\"setNaivgationBarTitle\"&gt; &lt;input type=\"text\" placeholder=\"请输入页面标题并点击设置即可\" name=\"navtitle\"&gt;&lt;/input&gt; &lt;button type=\"primary\" formType=\"submit\"&gt;设置&lt;/button&gt;&lt;/form&gt; 1234567setNaivgationBarTitle(e) { console.log(e) const navtitle = e.detail.value.navtitle wx.setNavigationBarTitle({ title:navtitle })}, 文本输入框input 12345678&lt;form bindsubmit=\"inputSubmit\"&gt; &lt;input type=\"text\" name=\"username\" placeholder=\"请输入你的用户名\"&gt;&lt;/input&gt; &lt;input password type=\"text\" name=\"password\" maxlength=\"6\" placeholder=\"请输入6位数密码\" confirm-type=\"next\" /&gt; &lt;input type=\"idcard\" name=\"idcard\" placeholder=\"请输入你的身份证账号\" /&gt; &lt;input type=\"number\" name=\"age\" placeholder=\"请输入你的年龄\" /&gt; &lt;input type=\"digit\" name=\"height\" placeholder=\"请输入你身高多少米\"/&gt; &lt;button form-type=\"submit\"&gt;提交&lt;/button&gt;&lt;/form&gt; input输入框会因为属性的类型的不同，手机键盘外观会有比较大的差异，所以需要点击预览，用微信扫描二维码在手机上体验（也可以启用真机调试）。 input输入框支持的type值有文本输入text、数字输入number、身份证输入idcard、小数点输入digit，当type不同时，注意手机键盘外观的不同； placeholder:输入框为空时的占位符（也就是默认值）；maxlength：最大输入长度；password和disabled都是boolean值，使用方法和之前的video组件里面的boolean属性一样。 在开发者工具的控制台我们可以看到打印的事件对象里的value对象，属性名即为input的name名，值即为我们输入的数据。如果没有name。 小任务：给input输入框配置confirm-type，分别输入send、search、next、go、done，然后点击预览，用微信扫描二维码体验，注意输入内容时，手机键盘显示的不同。 表单组件组合一个完整的数据收集表单，除了可以提交input文本框里面的数据，还可以提交开关选择器按钮switch、滑动选择器按钮slider、单选按钮radio、多选按钮checkbox等组件里面的数据。 input绑定事件处理函数bindinput响应式数据渲染 剪切板设置剪切板内容wx.setClipboardData()、获取剪切板内容wx.getClipboardData() 图片、缓存与文件获取手机相册或拍照的图片 wx.chooseImage() 上传一张照片 12345678910111213141516171819202122232425file.wxml&lt;button bindtap=\"chooseImg\"&gt;选择图片&lt;/button&gt;&lt;image mode=\"widthFix\" src=\"{{imgurl}}\"&gt;&lt;/image&gt;&lt;view&gt;上传的图片&lt;/view&gt;file.js data: { imgurl:\"\", }, chooseImg:function(){ let that=this wx.chooseImage({ count: 1, sizeType: ['original', 'compressed'], sourceType: ['album', 'camera'], success(res) { const imgurl = res.tempFilePaths that.setData({ imgurl }) } }) }, count：可以选择的照片数量，默认为9张（由于imgurl声明的是字符串，多张照片需为数组Array，后面有上传多张图片的案例） sourceType：选择图片的来源，album就是图片可以来自手机相册；而camera是可以来自手机拍照，两个都写就是来自相册或拍照都可以； sizeType：所选的图片的尺寸，original为原图，compressed为压缩图，为了减轻服务器压力，建议为压缩图； tempFilePaths为临时文件的路径列表，tempFiles为临时文件列表，注意这两个值都为数组。 操作图片 wx.getImageInfo() 123456789回调函数经过之前的学习，相信大家对回调函数success、fail有了一定的认识，那什么是回调函数呢？简单一点说就是：回调Callback是指在另一个函数执行完成之后被调用的函数。success、fail就都是在小程序的API函数执行完成之后，才会被调用，而success和fail它们本身也是函数，也能返回数据。而复杂一点说，就是回调函数本身就是函数，但是它们却被其他函数给调用，而调用函数的函数被称为高阶函数。这些大家只需要粗略了解就可以了。异步与同步我们前面也提及过异步，那什么会有异步呢？因为JavaScript是单线程的编程语言，就是从上到下、一行一行去执行代码，类似于排队一样一个个处理，第一个不处理完，就不会处理后面的。但是遇到网络请求、I/O操作（比如上面的读取图片信息）以及定时函数（后面会涉及）以及类似于成功反馈的情况，等这些不可预知时间的任务都执行完再处理后面的任务，肯定不行，于是就有了异步处理。把要等待其他函数执行完之后，才能执行的函数（比如读取图片信息）放到回调函数里，先不处理，等图片上传成功之后再来处理，这就是异步。比如wx.showToast()消息提示框，可以放到回调函数里，当API调用成功之后再来显示提示消息。回调函数相当于是异步的一个解决方案。 预览所有上传的图片 wx.previewImage() 123456789101112.wxml&lt;view wx:if=\"{{hasImg === true}}\"&gt; &lt;button bindtap=\"previewImg\"&gt;预览照片&lt;/button&gt;&lt;/view&gt;.js previewImg:function(){ wx.previewImage({ current: '', urls: this.data.imgurl, }) }, 保存图片到相册 wx.saveImageToPhotosAlbum() 压缩图片 小程序是有压缩图片的API的wx.compressImage()，尤其是在上传图片时，为了减轻存储服务器的压力，不能让用户上传分辨率过高的照片。 上传文件 wx.chooseMessageFile() 上传地理位置 wx.chooseLocation() 模块化与格式化 数据缓存Storage wx.setStorageSync()、wx.getStorageSync() 保存文件技术文档：wx.saveFile() 注意：尽管上传图片和上传文件都是把图片或文件先上传到临时文件里，但是保存图片wx.saveImageToPhotosAlbum()和保存文件wx.saveFile()是完全不同的概念，保存图片是把图片保存到手机本地相册；而保存文件则是把图片由临时文件移动到本地存储里，而本地存储每个小程序用户只有10M的空间。 网络API数据API 渲染网络数据到页面 聚合API：一个比较全面的综合性API服务平台 即速API：也是提供一些综合性的API服务 V2EX API：v2ex论坛是很多程序员经常会光顾的综合性技术论坛 CNode API：Nodejs交流论坛 和风天气：含天气预报、空气质量、实况天气等数据 Github API：Github是所有程序员都（必须）会使用的网站 知乎日报API：知乎日报API分析","link":"/2020/03/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B9%8BJavaScript/"},{"title":"老虎，海豚，企鹅，蜜蜂，八爪鱼","text":"认识你自己 这是一套性格测试题。 先试试回答以下的问题： 如果答案是非常同意，请给自己打5分； 如果是比较同意，则打4分； 如果是差不多，打3分； 如果只是有一点同意，请打2分； 如果答案是不同意，就打1分。 提醒你注意一点——回答问题时不是依据别人眼中的你来判断，而是你认为你本质上是不是这样的，看看问题吧： 1.你做事是一个值得信赖的人吗？ 非常同意 比较同意 差不多 一点同意 不同意 2.你个性温和吗？ 非常同意 比较同意 差不多 一点同意 不同意 3.你有活力吗？ 非常同意 比较同意 差不多 一点同意 不同意 4.你善解人意吗？ 非常同意 比较同意 差不多 一点同意 不同意 5.你独立吗？ 非常同意 比较同意 差不多 一点同意 不同意 6.你受人爱戴吗？ 非常同意 比较同意 差不多 一点同意 不同意 7.做事认真且正直吗？ 非常同意 比较同意 差不多 一点同意 不同意 8.你富有同情心吗？ 非常同意 比较同意 差不多 一点同意 不同意 9.你有说服力吗？ 非常同意 比较同意 差不多 一点同意 不同意 10.你大胆吗？ 非常同意 比较同意 差不多 一点同意 不同意 11.你精确吗？ 非常同意 比较同意 差不多 一点同意 不同意 12.你适应能力强吗？ 非常同意 比较同意 差不多 一点同意 不同意 13.你组织能力好吗？ 非常同意 比较同意 差不多 一点同意 不同意 14.你是否积极主动？ 非常同意 比较同意 差不多 一点同意 不同意 15.你害羞吗？ 非常同意 比较同意 差不多 一点同意 不同意 16.你强势吗？ 非常同意 比较同意 差不多 一点同意 不同意 17.你镇定吗？ 非常同意 比较同意 差不多 一点同意 不同意 18.你勇于学习吗？ 非常同意 比较同意 差不多 一点同意 不同意 19.你反应快吗？ 非常同意 比较同意 差不多 一点同意 不同意 20.你外向吗？ 非常同意 比较同意 差不多 一点同意 不同意 21.你注意细节吗？ 非常同意 比较同意 差不多 一点同意 不同意 22.你爱说话吗？ 非常同意 比较同意 差不多 一点同意 不同意 23.你的协调能力好吗？ 非常同意 比较同意 差不多 一点同意 不同意 24.你勤劳吗？ 非常同意 比较同意 差不多 一点同意 不同意 25.你慷慨吗？ 非常同意 比较同意 差不多 一点同意 不同意 26.你小心翼翼吗？ 非常同意 比较同意 差不多 一点同意 不同意 27.你令人愉快吗？ 非常同意 比较同意 差不多 一点同意 不同意 28.你传统吗？ 非常同意 比较同意 差不多 一点同意 不同意 29你亲切吗？ 非常同意 比较同意 差不多 一点同意 不同意 30.你工作足够有效率吗？ 非常同意 比较同意 差不多 一点同意 不同意 好啦，现在把第5、10、14、18、24、30题的分加起来就是你的“老虎”分数； 把第3、6、13、20、22、29题的分加起来就是你的“海豚”分数； 把第2、8、15、17、25、28题的分加起来就是你的“企鹅”分数； 把第1、7、11、16、21、26题的分加起来就是你的“蜜蜂”分数； 把第4、9、12、19、23、27题的分加起来就是你的“八爪鱼”分数。 假若你有某一项分远远高于其它四项，你就是典型的这种属性，假若你有某两项分大大超过其它三项，你是这两种动物的综合；假若你各项分数都比较接近，恭喜你，你是一个面面俱到近似完美性格的人；假若你有某一项分数特别偏低的话，想提高自己就需要在那一种动物属性的加强上下工夫了。我们就来逐一分析一下各种迥然不同的“动物”吧！ ■老虎型 个性特点：有自信，够权威，决断力高，竞争性强，胸怀大志，喜欢评估。 企图心强烈，喜欢冒险，个性积极，竞争力强，有对抗性。 优点：善于控制局面并能果断地作出决定的能力；用这一类型工作方式的人成就非凡。 缺点：当感到压力时，这类人就会太重视迅速的完成工作，就容易忽视细节，他们可能不顾自己和别人的情感。由于他们要求过高，加之好胜的天性，有时会成为工作狂。 老虎型工作风格的主要行为： 交谈时进行直接的目光接触； 有目的性且能迅速行动； 说话快速且具有说服力； 运用直截了当的实际性语言； 办公室挂有日历、计划要点。 老虎泰格，具备高支配型特质，竞争力强、好胜心盛、积极自信，是个有决断力的组织者。他胸怀大志、勇于冒险、分析敏锐，主动积极且具极为强烈的企图心，只要认定目标就勇往直前，不畏反抗与攻讦，誓要取得目标的家伙。 老虎型领导人都倾向以权威作风来进行决策，当其部属者除要高度服从外，也要有冒险犯难的勇气，为其杀敌闯关。 老虎型族人最适合开创性与改革性的工作，在开拓市场的时代或需要执行改革的环境中，最容易有出色的表现。 宏碁集团的施振荣和前美国GE总裁韦尔奇 (Jack Welch)等，都是老虎型领导人。 ■海豚型 个性特点：很热心，够乐观，口才流畅，好交朋友，风度翩翩，诚恳热心。热情洋溢、好交朋友、口才流畅、个性乐观、表现欲强。 优点：此类型的人生性活泼。能够使人兴奋，他们高效地工作，善于建立同盟或搞好关系来实现目标。他们很适合需要当众表现、引人注目、态度公开的工作。 缺点：因其跳跃性的思考模式，常无法顾及细节以及对事情的完成执着度 海豚型工作风格的主要行为 运用快速的手势； 面部表情特别丰富； 运用有说服力的语言； 工作空间里充满了各种能鼓舞人心的东西。 海豚百利具有高度的表达能力，他的社交能力极强，有流畅无碍的口才和热情幽默的风度，在团体或社群中容易广结善缘、建立知名度。海豚型领导人天生具备乐观与和善的性格，有真诚的同情心和感染他人的能力，在以团队合作为主的工作环境中，会有最好的表现。 海豚型领导人在任何团体内，都是人缘最好的人和最受欢迎的人，是最能吹起领导号角的人物。 当海豚型领导人的部属者，除要能乐于在团队中工作外，还要对其领导谦逊得体，不露锋、不出头，把一切成功光华都让与领导。 海豚型领导人，不宜有个老虎型领导人当二把手或部属。 反之，若老虎型领导人有个海豚型的人甘愿当其二把手，则会是最佳搭配。海豚型的人天生具有鼓吹理想的特质，在推动新思维、执行某种新使命或推广某项宣传等任务的工作中，都会有极出色的表现。 他们在开发市场或创建产业的工作环境中，最能发挥其所长。 有台湾企管大师之称的石滋宜博士，就是属于海豚型的人。 ■企鹅型 个性特点：很稳定，够敦厚，温和规律，不好冲突。行事稳健、强调平实，有过人的耐力，温和善良。 优点：他们对其他人的感情很敏感，这使他们在集体环境中左右逢源。 缺点：很难坚持自己的观点和迅速做出决定。一般说来，他们不喜欢面对与同事意见不和的局面，他们不愿处理争执。 企鹅型工作风格的主要行为 面部表情和蔼可亲； 说话慢条斯理，声音轻柔； 用赞同型、鼓励性的语言； 办公室里摆有家人的照片。 企鹅加利具有高度的耐心。他敦厚随和，行事冷静自持；生活讲求律规但也随缘从容，面对困境，都能泰然自若。 企鹅型领导人，适宜当安定内部的管理工作，在需要专业精密技巧的领域，或在气氛和谐且不具赶迫时间表等的职场环境中，他们最能发挥所长。当企业的产品稳踞市场时，企鹅型的企业领导人是极佳的总舵手。但当企业还在开拓市场的时候，老虎型或海豚型的人似乎较占优势。 或许，勇于开疆辟土的老虎型的人当一哥， 配以与人为善的企鹅型人当二把手，也是好的搭配。 企鹅型领导人强调无为而治，能与周围的人和睦相处而不树敌，是极佳的人事领导者，适宜在企业改革后，为公司和员工重建互信的工作。又由于他们具有高度的耐心性，有能力为企业赚取长远的利益，或为公司打好永续经营的基础。 ■蜜蜂型 个性特点：很传统，注重细节，条理分明，责任感强，重视纪律。保守、分析力强，精准度高，喜欢把细节条例化，个性拘谨含蓄。 优点：天生就有爱找出事情真相的习性，因为他们有耐心仔细考察所有的细节并想出合乎逻辑的解决办法。 缺点：把事实和精确度置于感情之前，这会被认为是感情冷漠。在压力下，有时为了避免做出结论，他们会分析过度。 蜜蜂型工作风格的主要行为 很少有面部表情； 动作缓慢； 使用精确的语言、注意特殊细节； 办公室里挂有图表、统计数字等。 蜜蜂斯诺具有高度精确的能力，其行事风格，重规则轻情感，事事以规则为准绳，并以之为主导思想。 他性格内敛、善于以数字或规条为表达工具而不大擅长以语言来沟通情感或向同事和部属等作指示。 他行事讲究条理分明、守纪律重承诺，是个完美主义者 架构稳定和制度健全的组织最好聘用蜜蜂型的人来当各级领导人，因为蜜蜂型领导人喜欢在安全架构的环境中工作，且其表现也会最好。其行事讲究制度化，事事求依据和规律的习性，极为适合事务机构的行事方式。然而，当企业需要进行目标重整、结构重组、流程变革时，蜜蜂型领导人就会产生迷失，不知如何处事，也不知如何自处。对改革行动，上者会先保持观望的态度，再慢慢适应新的局面；中者也会先保持观望的态度，然后呈辞求去；下者则会结集反对力量，公然表示反对或隐晦地从事反对等的行为。 又由于蜜蜂型人的行事决策风格，是以数据和规则为其主导思想，其直觉能力和应变能力都偏低，随而创造和创新能力也相对地弱，因而不宜担任需要创建或创新能力的任务。组织完善和发展安定的企业，宜用蜜蜂型企管人当家。 他们尊重传统、重视架构、事事求据喜爱工作安定的性格，是企业安定力量的来源。然而，由于他们行事讲究制度化，事事求依据和规律，故会将细节条例化，事事检查以求正确无误，甚至为了办事精确，不惜对人吹毛求疵或挑剔别人的错误，以显现自己一切照章办事的态度和求取完美的精神，不易维持团队内的团结精神和凝聚力。 ■八爪鱼型 工作风格的优点：善于在工作中调整自己的角色去适应环境，具有很好的沟通能力。 缺点：从别人眼中看八爪鱼族群，会觉得他们较无个性及原则。 主要行为： 综合老虎、海豚、企鹅、蜜蜂的特质，看似没有凸出个性，但擅长整合内外资； 没有强烈的个人意识形态，是他们处事的价值观。 八爪鱼科尔具有高度的应变能力。他性格善变，处事极具弹性，能为了适应环境的要求而调整其决定甚至信念。 八爪鱼型的领导人，是支配型、表达型、耐心型、精确型四种特质的综合体，没有突出的个性，擅长整合内外信息，兼容并蓄，不会与人为敌，以中庸之道处世。他们处事圆融，弹性极强，处事处处留有余地，行事绝对不会走偏锋极端，是一个办事让你放心的人物。然而，由于他们以善变为其专长，故做人不会有什么立场或原则，也不会对任何人有效忠的意向，是个冯道式的人物。部属会难以忍受其善变和不讲原则的行为；当他们上司者，则会日夜担心不知何时会遭其「出卖」。 八爪鱼型的领导人既没有凸出的个性，对事也没有什么强烈的个人意识型态，事事求中立并倾向站在没有立场的位置，故在冲突的环境中，是个能游走折中的高手。由于他们能密切地融合于各种环境中，他们可以为企业进行对内对外的各种交涉，只要任务确实和目标清楚，他们都能恰如其分地完成其任务。 这是一个在美国高层企业管理人员中普遍认可并用之于迅速区分不同人际风格的一套测试题，管理人员通过它可以来了解下属的工作性格以扬长避短，普通职员通过它可以知己知彼完善自身。","link":"/2020/03/26/%E8%80%81%E8%99%8E%EF%BC%8C%E6%B5%B7%E8%B1%9A%EF%BC%8C%E4%BC%81%E9%B9%85%EF%BC%8C%E8%9C%9C%E8%9C%82%EF%BC%8C%E5%85%AB%E7%88%AA%E9%B1%BC/"},{"title":"markdown学习笔记","text":"markdown笔记 - 常用快捷键加粗 Ctrl + B斜体 Ctrl + I引用 Ctrl + Q插入链接 Ctrl + L插入代码 Ctrl + K插入图片 Ctrl + G提升标题 Ctrl + H有序列表 Ctrl + O无序列表 Ctrl + U横线 Ctrl + R撤销 Ctrl + Z重做 Ctrl + Y Markdown标题： 这是一级标题这是二级标题一级标题二级标题三级标题四级标题五级标题六级标题字体斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本 分隔线 删除线 下划线 [^脚注]：markdown中的说明 markdown列表 无序列表 第一项 第二项 第三项 第一项 第二项 第三项 第一项 第二项 第三项 有序列表1.第一项： -嵌套 -嵌套2.第二项：3.第三项： markdown区块 区块引用 我的笔记 加油 markdown代码一个函数或者片段的代码 代码区块使用 4 个空格或者一个制表符（Tab 键）12345public class HelloWorld{ pulic static void main(String[] args){ System.out.println(\"Hello World!\"); }} markdown连接链接名称 或者 https://music.163.com/#/my/m/music/playlist?id=2061638738 链接也可以用变量来代替，文档末尾附带变量地址：这个链接用 1 作为网址变量 Google 然后在文档的结尾为变量赋值（网址） markdown图片 markdown表格 表头 表头 单元格 单元格 单元格 单元格 markdown高级技巧不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有： 等使用 Ctrl+Alt+Del 重启电脑 转义文本加粗** 正常显示星号 ** 123456789st=&gt;start: 开始框op=&gt;operation: 处理框cond=&gt;condition: 判断框(是或否?)sub1=&gt;subroutine: 子流程io=&gt;inputoutput: 输入输出框e=&gt;end: 结束框st(right)-&gt;op(right)-&gt;condcond(yes)-&gt;io(bottom)-&gt;econd(no)-&gt;sub1(right)-&gt;op markdown 表情包一览表People ico emoji ico emoji 🤣 :rofl: 😄 :smile: 😆 :laughing: 😊 :blush: 😃 :smiley: ☺ :relaxed: 😏 :smirk: 😍 :heart_eyes: 😘 :kissing_heart: 😚 :kissing_closed_eyes: 😳 :flushed: 😌 :relieved: 🙄 :roll_eyes: 🙃 :upside_down_face: 😆 :satisfied: 😁 :grin: 😉 :wink: 😜 :stuck_out_tongue_winking_eye: 😝 :stuck_out_tongue_closed_eyes: 😀 :grinning: 🙁 :slightly_frowning_face: 🙂 :slightly_smiling_face: 😗 :kissing: 😙 :kissing_smiling_eyes: 😛 :stuck_out_tongue: 😴 :sleeping: 😟 :worried: 😦 :frowning: 😧 :anguished: 😮 :open_mouth: 😬 :grimacing: 😕 :confused: 😯 :hushed: 😑 :expressionless: 😒 :unamused: 😅 :sweat_smile: 😓 :sweat: 😥 :disappointed_relieved: 😩 :weary: 😔 :pensive: 😞 :disappointed: 😖 :confounded: 😨 :fearful: 😰 :cold_sweat: 😣 :persevere: 😢 :cry: 😭 :sob: 😂 :joy: 😲 :astonished: 😱 :scream: :neckbeard: 😫 :tired_face: 😠 :angry: 😡 :rage: 🤔 :thinking: 🤐 :zipper_mouth_face: 😤 :triumph: 😪 :sleepy: 😋 :yum: 😷 :mask: 😎 :sunglasses: 😵 :dizzy_face: 👿 :imp: 😈 :smiling_imp: 😐 :neutral_face: 😶 :no_mouth: 😇 :innocent: 👽 :alien: 💛 :yellow_heart: 💙 :blue_heart: 💜 :purple_heart: ❤ :heart: 💚 :green_heart: 💔 :broken_heart: 💓 :heartbeat: 💗 :heartpulse: 💕 :two_hearts: 💞 :revolving_hearts: 💘 :cupid: 💖 :sparkling_heart: ✨ :sparkles: ⭐ :star: 🌟 :star2: 💫 :dizzy: 💥 :boom: 💥 :collision: 💢 :anger: ❗ :exclamation: ❓ :question: ❕ :grey_exclamation: ❔ :grey_question: 💤 :zzz: 💨 :dash: 💦 :sweat_drops: 🎶 :notes: 🎵 :musical_note: 🔥 :fire: 💩 :hankey: 💩 :poop: 💩 :shit: :+1: :+1: 👍 :thumbsup: :-1: :-1: 👎 :thumbsdown: 👌 :ok_hand: 👊 :punch: 👊 :facepunch: ✊ :fist: ✌ :v: 👋 :wave: ✋ :hand: ✋ :raised_hand: 👐 :open_hands: ☝ :point_up: 👇 :point_down: 👈 :point_left: 👉 :point_right: 🙌 :raised_hands: 🙏 :pray: 👆 :point_up_2: 👏 :clap: 💪 :muscle: 🤘 :metal: 🖕 :fu: 🏃 :runner: 🏃 :running: 👫 :couple: 👪 :family: 👬 :two_men_holding_hands: 👭 :two_women_holding_hands: 💃 :dancer: 👯 :dancers: 🙆 :ok_woman: 🙅 :no_good: 💁 :information_desk_person: 🙋 :raising_hand: 👰 :bride_with_veil: 🙎 :person_with_pouting_face: 🙍 :person_frowning: 🙇 :bow: 💑 :couple_with_heart: 💆 :massage: 💇 :haircut: 💅 :nail_care: 👦 :boy: 👧 :girl: 👩 :woman: 👨 :man: 👶 :baby: 👵 :older_woman: 👴 :older_man: 👱 :person_with_blond_hair: 👲 :man_with_gua_pi_mao: 👳 :man_with_turban: 👷 :construction_worker: 👮 :cop: 👼 :angel: 👸 :princess: 😺 :smiley_cat: 😸 :smile_cat: 😻 :heart_eyes_cat: 😽 :kissing_cat: 😼 :smirk_cat: 🙀 :scream_cat: 😿 :crying_cat_face: 😹 :joy_cat: 😾 :pouting_cat: 👹 :japanese_ogre: 👺 :japanese_goblin: 🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil: 💂 :guardsman: 💀 :skull: 🐾 :feet: 👄 :lips: 💋 :kiss: 💧 :droplet: 👂 :ear: 👀 :eyes: 👃 :nose: 👅 :tongue: 💌 :love_letter: 👤 :bust_in_silhouette: 👥 :busts_in_silhouette: 💬 :speech_balloon: 💭 :thought_balloon: :feelsgood: :finnadie: :goberserk: :godmode: :hurtrealbad: :rage1: :rage2: :rage3: :rage4: :suspect: :trollface: Nature ico emoji ico emoji ☀ :sunny: ☔ :umbrella: ☁ :cloud: ❄ :snowflake: ⛄ :snowman: ⚡ :zap: 🌀 :cyclone: 🌁 :foggy: 🌊 :ocean: 🐱 :cat: 🐶 :dog: 🐭 :mouse: 🐹 :hamster: 🐰 :rabbit: 🐺 :wolf: 🐸 :frog: 🐯 :tiger: 🐨 :koala: 🐻 :bear: 🐷 :pig: 🐽 :pig_nose: 🐮 :cow: 🐗 :boar: 🐵 :monkey_face: 🐒 :monkey: 🐴 :horse: 🐎 :racehorse: 🐫 :camel: 🐑 :sheep: 🐘 :elephant: 🐼 :panda_face: 🐍 :snake: 🐦 :bird: 🐤 :baby_chick: 🐥 :hatched_chick: 🐣 :hatching_chick: 🐔 :chicken: 🐧 :penguin: 🐢 :turtle: 🐛 :bug: 🐝 :honeybee: 🐜 :ant: 🐞 :beetle: 🐌 :snail: 🐙 :octopus: 🐠 :tropical_fish: 🐟 :fish: 🐳 :whale: 🐋 :whale2: 🐬 :dolphin: 🐄 :cow2: 🐏 :ram: 🐀 :rat: 🐃 :water_buffalo: 🐅 :tiger2: 🐇 :rabbit2: 🐉 :dragon: 🐐 :goat: 🐓 :rooster: 🐕 :dog2: 🐖 :pig2: 🐁 :mouse2: 🐂 :ox: 🐲 :dragon_face: 🐡 :blowfish: 🐊 :crocodile: 🐪 :dromedary_camel: 🐆 :leopard: 🐈 :cat2: 🐩 :poodle: 🐾 :paw_prints: 💐 :bouquet: 🌸 :cherry_blossom: 🌷 :tulip: 🍀 :four_leaf_clover: 🌹 :rose: 🌻 :sunflower: 🌺 :hibiscus: 🍁 :maple_leaf: 🍃 :leaves: 🍂 :fallen_leaf: 🌿 :herb: 🍄 :mushroom: 🌵 :cactus: 🌴 :palm_tree: 🌲 :evergreen_tree: 🌳 :deciduous_tree: 🌰 :chestnut: 🌱 :seedling: 🌼 :blossom: 🌾 :ear_of_rice: 🐚 :shell: 🌐 :globe_with_meridians: 🌞 :sun_with_face: 🌝 :full_moon_with_face: 🌚 :new_moon_with_face: 🌑 :new_moon: 🌒 :waxing_crescent_moon: 🌓 :first_quarter_moon: 🌔 :waxing_gibbous_moon: 🌕 :full_moon: 🌖 :waning_gibbous_moon: 🌗 :last_quarter_moon: 🌘 :waning_crescent_moon: 🌜 :last_quarter_moon_with_face: 🌛 :first_quarter_moon_with_face: 🌙 :crescent_moon: 🌍 :earth_africa: 🌎 :earth_americas: 🌏 :earth_asia: 🌋 :volcano: 🌌 :milky_way: ⛅ :partly_sunny: :octocat: :squirrel: Objects ico emoji ico emoji 🎍 :bamboo: 💝 :gift_heart: 🎎 :dolls: 🎒 :school_satchel: 🎓 :mortar_board: 🎏 :flags: 🎆 :fireworks: 🎇 :sparkler: 🎐 :wind_chime: 🎑 :rice_scene: 🎃 :jack_o_lantern: 👻 :ghost: 🎅 :santa: 🎄 :christmas_tree: 🎁 :gift: 🔔 :bell: 🔕 :no_bell: 🎋 :tanabata_tree: 🎉 :tada: 🎊 :confetti_ball: 🎈 :balloon: 🔮 :crystal_ball: 💿 :cd: 📀 :dvd: 💾 :floppy_disk: 📷 :camera: 📹 :video_camera: 🎥 :movie_camera: 💻 :computer: 📺 :tv: 📱 :iphone: ☎ :phone: ☎ :telephone: 📞 :telephone_receiver: 📟 :pager: 📠 :fax: 💽 :minidisc: 📼 :vhs: 🔉 :sound: 🔈 :speaker: 🔇 :mute: 📢 :loudspeaker: 📣 :mega: ⌛ :hourglass: ⏳ :hourglass_flowing_sand: ⏰ :alarm_clock: ⌚ :watch: 📻 :radio: 📡 :satellite: ➿ :loop: 🔍 :mag: 🔎 :mag_right: 🔓 :unlock: 🔒 :lock: 🔏 :lock_with_ink_pen: 🔐 :closed_lock_with_key: 🔑 :key: 💡 :bulb: 🔦 :flashlight: 🔆 :high_brightness: 🔅 :low_brightness: 🔌 :electric_plug: 🔋 :battery: 📲 :calling: ✉ :email: 📫 :mailbox: 📮 :postbox: 🛀 :bath: 🛁 :bathtub: 🚿 :shower: 🚽 :toilet: 🔧 :wrench: 🔩 :nut_and_bolt: 🔨 :hammer: 💺 :seat: 💰 :moneybag: 💴 :yen: 💵 :dollar: 💷 :pound: 💶 :euro: 💳 :credit_card: 💸 :money_with_wings: :e-mail: :e-mail: 📥 :inbox_tray: 📤 :outbox_tray: ✉ :envelope: 📨 :incoming_envelope: 📯 :postal_horn: 📪 :mailbox_closed: 📬 :mailbox_with_mail: 📭 :mailbox_with_no_mail: 📦 :package: 🚪 :door: 🚬 :smoking: 💣 :bomb: 🔫 :gun: 🔪 :hocho: 💊 :pill: 💉 :syringe: 📄 :page_facing_up: 📃 :page_with_curl: 📑 :bookmark_tabs: 📊 :bar_chart: 📈 :chart_with_upwards_trend: 📉 :chart_with_downwards_trend: 📜 :scroll: 📋 :clipboard: 📆 :calendar: 📅 :date: 📇 :card_index: 📁 :file_folder: 📂 :open_file_folder: ✂ :scissors: 📌 :pushpin: 📎 :paperclip: ✒ :black_nib: ✏ :pencil2: 📏 :straight_ruler: 📐 :triangular_ruler: 📕 :closed_book: 📗 :green_book: 📘 :blue_book: 📙 :orange_book: 📓 :notebook: 📔 :notebook_with_decorative_cover: 📒 :ledger: 📚 :books: 🔖 :bookmark: 📛 :name_badge: 🔬 :microscope: 🔭 :telescope: 📰 :newspaper: 🏈 :football: 🏀 :basketball: ⚽ :soccer: ⚾ :baseball: 🎾 :tennis: 🎱 :8ball: 🏉 :rugby_football: 🎳 :bowling: ⛳ :golf: 🚵 :mountain_bicyclist: 🚴 :bicyclist: 🏇 :horse_racing: 🏂 :snowboarder: 🏊 :swimmer: 🏄 :surfer: 🎿 :ski: ♠ :spades: ♥ :hearts: ♣ :clubs: ♦ :diamonds: 💎 :gem: 💍 :ring: 🏆 :trophy: 🎼 :musical_score: 🎹 :musical_keyboard: 🎻 :violin: 👾 :space_invader: 🎮 :video_game: 🃏 :black_joker: 🎴 :flower_playing_cards: 🎲 :game_die: 🎯 :dart: 🀄 :mahjong: 🎬 :clapper: 📝 :memo: 📝 :pencil: 📖 :book: 🎨 :art: 🎤 :microphone: 🎧 :headphones: 🎺 :trumpet: 🎷 :saxophone: 🎸 :guitar: 👞 :shoe: 👡 :sandal: 👠 :high_heel: 💄 :lipstick: 👢 :boot: 👕 :shirt: 👕 :tshirt: 👔 :necktie: 👚 :womans_clothes: 👗 :dress: 🎽 :running_shirt_with_sash: 👖 :jeans: 👘 :kimono: 👙 :bikini: 🎀 :ribbon: 🎩 :tophat: 👑 :crown: 👒 :womans_hat: 👞 :mans_shoe: 🌂 :closed_umbrella: 💼 :briefcase: 👜 :handbag: 👝 :pouch: 👛 :purse: 👓 :eyeglasses: 🎣 :fishing_pole_and_fish: ☕ :coffee: 🍵 :tea: 🍶 :sake: 🍼 :baby_bottle: 🍺 :beer: 🍻 :beers: 🍸 :cocktail: 🍹 :tropical_drink: 🍷 :wine_glass: 🍴 :fork_and_knife: 🍕 :pizza: 🍔 :hamburger: 🍟 :fries: 🍗 :poultry_leg: 🍖 :meat_on_bone: 🍝 :spaghetti: 🍛 :curry: 🍤 :fried_shrimp: 🍱 :bento: 🍣 :sushi: 🍥 :fish_cake: 🍙 :rice_ball: 🍘 :rice_cracker: 🍚 :rice: 🍜 :ramen: 🍲 :stew: 🍢 :oden: 🍡 :dango: 🥚 :egg: 🍞 :bread: 🍩 :doughnut: 🍮 :custard: 🍦 :icecream: 🍨 :ice_cream: 🍧 :shaved_ice: 🎂 :birthday: 🍰 :cake: 🍪 :cookie: 🍫 :chocolate_bar: 🍬 :candy: 🍭 :lollipop: 🍯 :honey_pot: 🍎 :apple: 🍏 :green_apple: 🍊 :tangerine: 🍋 :lemon: 🍒 :cherries: 🍇 :grapes: 🍉 :watermelon: 🍓 :strawberry: 🍑 :peach: 🍈 :melon: 🍌 :banana: 🍐 :pear: 🍍 :pineapple: 🍠 :sweet_potato: 🍆 :eggplant: 🍅 :tomato: 🌽 :corn: Places ico emoji ico emoji 🏠 :house: 🏡 :house_with_garden: 🏫 :school: 🏢 :office: 🏣 :post_office: 🏥 :hospital: 🏦 :bank: 🏪 :convenience_store: 🏩 :love_hotel: 🏨 :hotel: 💒 :wedding: ⛪ :church: 🏬 :department_store: 🏤 :european_post_office: 🌇 :city_sunrise: 🌆 :city_sunset: 🏯 :japanese_castle: 🏰 :european_castle: ⛺ :tent: 🏭 :factory: 🗼 :tokyo_tower: 🗾 :japan: 🗻 :mount_fuji: 🌄 :sunrise_over_mountains: 🌅 :sunrise: 🌠 :stars: 🗽 :statue_of_liberty: 🌉 :bridge_at_night: 🎠 :carousel_horse: 🌈 :rainbow: 🎡 :ferris_wheel: ⛲ :fountain: 🎢 :roller_coaster: 🚢 :ship: 🚤 :speedboat: ⛵ :boat: ⛵ :sailboat: 🚣 :rowboat: ⚓ :anchor: 🚀 :rocket: ✈ :airplane: 🚁 :helicopter: 🚂 :steam_locomotive: 🚊 :tram: 🚞 :mountain_railway: 🚲 :bike: 🚡 :aerial_tramway: 🚟 :suspension_railway: 🚠 :mountain_cableway: 🚜 :tractor: 🚙 :blue_car: 🚘 :oncoming_automobile: 🚗 :car: 🚗 :red_car: 🚕 :taxi: 🚖 :oncoming_taxi: 🚛 :articulated_lorry: 🚌 :bus: 🚍 :oncoming_bus: 🚨 :rotating_light: 🚓 :police_car: 🚔 :oncoming_police_car: 🚒 :fire_engine: 🚑 :ambulance: 🚐 :minibus: 🚚 :truck: 🚋 :train: 🚉 :station: 🚆 :train2: 🚅 :bullettrain_front: 🚄 :bullettrain_side: 🚈 :light_rail: 🚝 :monorail: 🚃 :railway_car: 🚎 :trolleybus: 🎫 :ticket: ⛽ :fuelpump: 🚦 :vertical_traffic_light: 🚥 :traffic_light: ⚠ :warning: 🚧 :construction: 🔰 :beginner: 🏧 :atm: 🎰 :slot_machine: 🚏 :busstop: 💈 :barber: ♨ :hotsprings: 🏁 :checkered_flag: 🎌 :crossed_flags: 🏮 :izakaya_lantern: 🗿 :moyai: 🎪 :circus_tent: 🎭 :performing_arts: 📍 :round_pushpin: 🚩 :triangular_flag_on_post: 🇯🇵 :jp: 🇰🇷 :kr: 🇨🇳 :cn: 🇺🇸 :us: 🇫🇷 :fr: 🇪🇸 :es: 🇮🇹 :it: 🇷🇺 :ru: 🇬🇧 :gb: 🇬🇧 :uk: 🇩🇪 :de: Symbols ico emoji ico emoji 1⃣ :one: 2⃣ :two: 3⃣ :three: 4⃣ :four: 5⃣ :five: 6⃣ :six: 7⃣ :seven: 8⃣ :eight: 9⃣ :nine: 🔟 :keycap_ten: 🔢 :1234: 0⃣ :zero: #⃣ :hash: 🔣 :symbols: ◀ :arrow_backward: ⬇ :arrow_down: ▶ :arrow_forward: ⬅ :arrow_left: 🔠 :capital_abcd: 🔡 :abcd: 🔤 :abc: ↙ :arrow_lower_left: ↘ :arrow_lower_right: ➡ :arrow_right: ⬆ :arrow_up: ↖ :arrow_upper_left: ↗ :arrow_upper_right: ⏬ :arrow_double_down: ⏫ :arrow_double_up: 🔽 :arrow_down_small: ⤵ :arrow_heading_down: ⤴ :arrow_heading_up: ↩ :leftwards_arrow_with_hook: ↪ :arrow_right_hook: ↔ :left_right_arrow: ↕ :arrow_up_down: 🔼 :arrow_up_small: 🔃 :arrows_clockwise: 🔄 :arrows_counterclockwise: ⏪ :rewind: ⏩ :fast_forward: ℹ :information_source: 🆗 :ok: 🔀 :twisted_rightwards_arrows: 🔁 :repeat: 🔂 :repeat_one: 🆕 :new: 🔝 :top: 🆙 :up: 🆒 :cool: 🆓 :free: 🆖 :ng: 🎦 :cinema: 🈁 :koko: 📶 :signal_strength: 🈹 :u5272: 🈴 :u5408: 🈺 :u55b6: 🈯 :u6307: 🈷 :u6708: 🈶 :u6709: 🈵 :u6e80: 🈚 :u7121: 🈸 :u7533: 🈳 :u7a7a: 🈲 :u7981: 🈂 :sa: 🚻 :restroom: 🚹 :mens: 🚺 :womens: 🚼 :baby_symbol: 🚭 :no_smoking: 🅿 :parking: ♿ :wheelchair: 🚇 :metro: 🛄 :baggage_claim: 🉑 :accept: 🚾 :wc: 🚰 :potable_water: 🚮 :put_litter_in_its_place: ㊙ :secret: ㊗ :congratulations: Ⓜ :m: 🛂 :passport_control: 🛅 :left_luggage: 🛃 :customs: 🉐 :ideograph_advantage: 🆑 :cl: 🆘 :sos: 🆔 :id: 🚫 :no_entry_sign: 🔞 :underage: 📵 :no_mobile_phones: 🚯 :do_not_litter: :non-potable_water: :non-potable_water: 🚳 :no_bicycles: 🚷 :no_pedestrians: 🚸 :children_crossing: ⛔ :no_entry: ✳ :eight_spoked_asterisk: ❇ :sparkle: ✴ :eight_pointed_black_star: 💟 :heart_decoration: 🆚 :vs: 📳 :vibration_mode: 📴 :mobile_phone_off: 💹 :chart: 💱 :currency_exchange: ♈ :aries: ♉ :taurus: ♊ :gemini: ♋ :cancer: ♌ :leo: ♍ :virgo: ♎ :libra: ♏ :scorpius: ♐ :sagittarius: ♑ :capricorn: ♒ :aquarius: ♓ :pisces: ⛎ :ophiuchus: 🔯 :six_pointed_star: ❎ :negative_squared_cross_mark: 🅰 :a: 🅱 :b: 🆎 :ab: 🅾 :o2: 💠 :diamond_shape_with_a_dot_inside: ♻ :recycle: 🔚 :end: 🔙 :back: 🔛 :on: 🔜 :soon: 🕐 :clock1: 🕜 :clock130: 🕙 :clock10: 🕥 :clock1030: 🕚 :clock11: 🕦 :clock1130: 🕛 :clock12: 🕧 :clock1230: 🕑 :clock2: 🕝 :clock230: 🕒 :clock3: 🕞 :clock330: 🕓 :clock4: 🕟 :clock430: 🕔 :clock5: 🕠 :clock530: 🕕 :clock6: 🕡 :clock630: 🕖 :clock7: 🕢 :clock730: 🕗 :clock8: 🕣 :clock830: 🕘 :clock9: 🕤 :clock930: 💲 :heavy_dollar_sign: © :copyright: ® :registered: ™ :tm: ❌ :x: ❗ :heavy_exclamation_mark: ‼ :bangbang: ⁉ :interrobang: ⭕ :o: ✖ :heavy_multiplication_x: ➕ :heavy_plus_sign: ➖ :heavy_minus_sign: ➗ :heavy_division_sign: 💮 :white_flower: 💯 :100: ✔ :heavy_check_mark: ☑ :ballot_box_with_check: 🔘 :radio_button: 🔗 :link: ➰ :curly_loop: 〰 :wavy_dash: 〽 :part_alternation_mark: 🔱 :trident: ▪ :black_small_square: ▫ :white_small_square: ◾ :black_medium_small_square: ◽ :white_medium_small_square: ◼ :black_medium_square: ◻ :white_medium_square: ⬛ :black_large_square: ⬜ :white_large_square: ✅ :white_check_mark: 🔲 :black_square_button: 🔳 :white_square_button: ⚫ :black_circle: ⚪ :white_circle: 🔴 :red_circle: 🔵 :large_blue_circle: 🔷 :large_blue_diamond: 🔶 :large_orange_diamond: 🔹 :small_blue_diamond: 🔸 :small_orange_diamond: 🔺 :small_red_triangle: 🔻 :small_red_triangle_down: :shipit: Uncategorized ico emoji ico emoji 🥇 :1st_place_medal: 🥈 :2nd_place_medal: 🥉 :3rd_place_medal: 🇦🇫 :afghanistan: 🇦🇽 :aland_islands: 🇦🇱 :albania: ⚗ :alembic: 🇩🇿 :algeria: 🇦🇸 :american_samoa: 🏺 :amphora: 🇦🇩 :andorra: 🇦🇴 :angola: 🇦🇮 :anguilla: 🇦🇶 :antarctica: 🇦🇬 :antigua_barbuda: 🇦🇷 :argentina: 🇦🇲 :armenia: 🛰 :artificial_satellite: 🇦🇼 :aruba: *⃣ :asterisk: 👟 :athletic_shoe: :atom: ⚛ :atom_symbol: 🇦🇺 :australia: 🇦🇹 :austria: 🥑 :avocado: 🇦🇿 :azerbaijan: 🥓 :bacon: 🏸 :badminton: 🥖 :baguette_bread: 🇧🇸 :bahamas: 🇧🇭 :bahrain: ⚖ :balance_scale: 🗳 :ballot_box: 🇧🇩 :bangladesh: 🇧🇧 :barbados: ⛹ :basketball_man: ⛹♀ :basketball_woman: 🦇 :bat: 🏖 :beach_umbrella: 🛏 :bed: 🐝 :bee: 🇧🇾 :belarus: 🇧🇪 :belgium: 🇧🇿 :belize: 🛎 :bellhop_bell: 🇧🇯 :benin: 🇧🇲 :bermuda: 🇧🇹 :bhutan: 🚴 :biking_man: 🚴♀ :biking_woman: ☣ :biohazard: 🏴 :black_flag: 🖤 :black_heart: 👱 :blonde_man: 👱♀ :blonde_woman: 🇧🇴 :bolivia: 🇧🇦 :bosnia_herzegovina: 🇧🇼 :botswana: 🏹 :bow_and_arrow: 🙇 :bowing_man: 🙇♀ :bowing_woman: 🥊 :boxing_glove: 🇧🇷 :brazil: 🇮🇴 :british_indian_ocean_territory: 🇻🇬 :british_virgin_islands: 🇧🇳 :brunei: 🏗 :building_construction: 🇧🇬 :bulgaria: 🇧🇫 :burkina_faso: 🌯 :burrito: 🇧🇮 :burundi: 🕴 :business_suit_levitating: 🦋 :butterfly: 🤙 :call_me_hand: 🇰🇭 :cambodia: 📸 :camera_flash: 🇨🇲 :cameroon: 🏕 :camping: 🇨🇦 :canada: 🇮🇨 :canary_islands: 🕯 :candle: 🛶 :canoe: 🇨🇻 :cape_verde: 🗃 :card_file_box: 🗂 :card_index_dividers: 🇧🇶 :caribbean_netherlands: 🥕 :carrot: 🇰🇾 :cayman_islands: 🇨🇫 :central_african_republic: 🇹🇩 :chad: ⛓ :chains: 🍾 :champagne: 🧀 :cheese: 🇨🇱 :chile: 🐿 :chipmunk: 🇨🇽 :christmas_island: 🏙 :cityscape: 🗜 :clamp: 🏛 :classical_building: 🥂 :clinking_glasses: 🌩 :cloud_with_lightning: ⛈ :cloud_with_lightning_and_rain: 🌧 :cloud_with_rain: 🌨 :cloud_with_snow: 🤡 :clown_face: 🇨🇨 :cocos_islands: ⚰ :coffin: 🇨🇴 :colombia: ☄ :comet: 🇰🇲 :comoros: 🖱 :computer_mouse: 🇨🇬 :congo_brazzaville: 🇨🇩 :congo_kinshasa: 👷 :construction_worker_man: 👷♀ :construction_worker_woman: 🎛 :control_knobs: 🇨🇰 :cook_islands: 🇨🇷 :costa_rica: 🇨🇮 :cote_divoire: 🛋 :couch_and_lamp: 👨❤👨 :couple_with_heart_man_man: 💑 :couple_with_heart_woman_man: 👩❤👩 :couple_with_heart_woman_woman: 👨❤💋👨 :couplekiss_man_man: 💏 :couplekiss_man_woman: 👩❤💋👩 :couplekiss_woman_woman: 🤠 :cowboy_hat_face: 🦀 :crab: 🖍 :crayon: 🏏 :cricket: 🇭🇷 :croatia: 🥐 :croissant: 🤞 :crossed_fingers: ⚔ :crossed_swords: 🇨🇺 :cuba: 🥒 :cucumber: 🇨🇼 :curacao: 🇨🇾 :cyprus: 🇨🇿 :czech_republic: 🗡 :dagger: 👯♂ :dancing_men: 👯 :dancing_women: 🕶 :dark_sunglasses: 🦌 :deer: 🇩🇰 :denmark: 🏚 :derelict_house: 🏜 :desert: 🏝 :desert_island: 🖥 :desktop_computer: 🕵 :detective: 🇩🇯 :djibouti: 🇩🇲 :dominica: 🇩🇴 :dominican_republic: 🕊 :dove: 🤤 :drooling_face: 🥁 :drum: 🦆 :duck: 🦅 :eagle: 🇪🇨 :ecuador: 🇪🇬 :egypt: 🇸🇻 :el_salvador: :electron: 📩 :envelope_with_arrow: 🇬🇶 :equatorial_guinea: 🇪🇷 :eritrea: 🇪🇪 :estonia: 🇪🇹 :ethiopia: 🇪🇺 :eu: 🇪🇺 :european_union: 👁 :eye: 👁🗨 :eye_speech_bubble: 🤕 :face_with_head_bandage: 🤒 :face_with_thermometer: 🇫🇰 :falkland_islands: 👨👦 :family_man_boy: 👨👦👦 :family_man_boy_boy: 👨👧 :family_man_girl: 👨👧👦 :family_man_girl_boy: 👨👧👧 :family_man_girl_girl: 👨👨👦 :family_man_man_boy: 👨👨👦👦 :family_man_man_boy_boy: 👨👨👧 :family_man_man_girl: 👨👨👧👦 :family_man_man_girl_boy: 👨👨👧👧 :family_man_man_girl_girl: 👪 :family_man_woman_boy: 👨👩👦👦 :family_man_woman_boy_boy: 👨👩👧 :family_man_woman_girl: 👨👩👧👦 :family_man_woman_girl_boy: 👨👩👧👧 :family_man_woman_girl_girl: 👩👦 :family_woman_boy: 👩👦👦 :family_woman_boy_boy: 👩👧 :family_woman_girl: 👩👧👦 :family_woman_girl_boy: 👩👧👧 :family_woman_girl_girl: 👩👩👦 :family_woman_woman_boy: 👩👩👦👦 :family_woman_woman_boy_boy: 👩👩👧 :family_woman_woman_girl: 👩👩👧👦 :family_woman_woman_girl_boy: 👩👩👧👧 :family_woman_woman_girl_girl: 🇫🇴 :faroe_islands: 🕵♀ :female_detective: ⛴ :ferry: 🏑 :field_hockey: 🇫🇯 :fiji: 🗄 :file_cabinet: 📽 :film_projector: 🎞 :film_strip: 🇫🇮 :finland: 🤛 :fist_left: 👊 :fist_oncoming: ✊ :fist_raised: 🤜 :fist_right: ⚜ :fleur_de_lis: 🛬 :flight_arrival: 🛫 :flight_departure: 🐬 :flipper: 🌫 :fog: 👣 :footprints: 🖋 :fountain_pen: 🦊 :fox_face: 🖼 :framed_picture: 🇬🇫 :french_guiana: 🇵🇫 :french_polynesia: 🇹🇫 :french_southern_territories: 🍳 :fried_egg: ☹ :frowning_face: 🙍♂ :frowning_man: 🙍 :frowning_woman: ⚱ :funeral_urn: 🇬🇦 :gabon: 🇬🇲 :gambia: ⚙ :gear: 🇬🇪 :georgia: 🇬🇭 :ghana: 🇬🇮 :gibraltar: 🥅 :goal_net: 🏌 :golfing_man: 🏌♀ :golfing_woman: 🦍 :gorilla: 🇬🇷 :greece: 🥗 :green_salad: 🇬🇱 :greenland: 🇬🇩 :grenada: 🇬🇵 :guadeloupe: 🇬🇺 :guam: 💂♀ :guardswoman: 🇬🇹 :guatemala: 🇬🇬 :guernsey: 🇬🇳 :guinea: 🇬🇼 :guinea_bissau: 🇬🇾 :guyana: 💇♂ :haircut_man: 💇 :haircut_woman: 🇭🇹 :haiti: ⚒ :hammer_and_pick: 🛠 :hammer_and_wrench: 🤝 :handshake: ❣ :heavy_heart_exclamation: 🕳 :hole: 🇭🇳 :honduras: 🇭🇰 :hong_kong: 🌶 :hot_pepper: 🌭 :hotdog: 🏘 :houses: 🤗 :hugs: 🇭🇺 :hungary: 🏒 :ice_hockey: ⛸ :ice_skate: 🇮🇸 :iceland: 🇮🇳 :india: 🇮🇩 :indonesia: 🇮🇷 :iran: 🇮🇶 :iraq: 🇮🇪 :ireland: 🇮🇲 :isle_of_man: 🇮🇱 :israel: 🇯🇲 :jamaica: 🇯🇪 :jersey: 🇯🇴 :jordan: 🕹 :joystick: 🕋 :kaaba: 🇰🇿 :kazakhstan: 🇰🇪 :kenya: ⌨ :keyboard: 🛴 :kick_scooter: 🇰🇮 :kiribati: 🥝 :kiwi_fruit: 🔪 :knife: 🇽🇰 :kosovo: 🇰🇼 :kuwait: 🇰🇬 :kyrgyzstan: 🏷 :label: 🏮 :lantern: 🇱🇦 :laos: ✝ :latin_cross: 🇱🇻 :latvia: 🇱🇧 :lebanon: 🇱🇸 :lesotho: 🎚 :level_slider: 🇱🇷 :liberia: 🇱🇾 :libya: 🇱🇮 :liechtenstein: 🦁 :lion: 🇱🇹 :lithuania: 🦎 :lizard: 🔊 :loud_sound: 🇱🇺 :luxembourg: 🤥 :lying_face: 🇲🇴 :macau: 🇲🇰 :macedonia: 🇲🇬 :madagascar: 🇲🇼 :malawi: 🇲🇾 :malaysia: 🇲🇻 :maldives: 🕵 :male_detective: 🇲🇱 :mali: 🇲🇹 :malta: 👨🎨 :man_artist: 👨🚀 :man_astronaut: 🤸♂ :man_cartwheeling: 👨🍳 :man_cook: 🕺 :man_dancing: 🤦♂ :man_facepalming: 👨🏭 :man_factory_worker: 👨🌾 :man_farmer: 👨🚒 :man_firefighter: 👨⚕ :man_health_worker: 🤵 :man_in_tuxedo: 👨⚖ :man_judge: 🤹♂ :man_juggling: 👨🔧 :man_mechanic: 👨💼 :man_office_worker: 👨✈ :man_pilot: 🤾♂ :man_playing_handball: 🤽♂ :man_playing_water_polo: 👨🔬 :man_scientist: 🤷♂ :man_shrugging: 👨🎤 :man_singer: 👨🎓 :man_student: 👨🏫 :man_teacher: 👨💻 :man_technologist: 🍊 :mandarin: 🕰 :mantelpiece_clock: 🇲🇭 :marshall_islands: 🥋 :martial_arts_uniform: 🇲🇶 :martinique: 💆♂ :massage_man: 💆 :massage_woman: 🇲🇷 :mauritania: 🇲🇺 :mauritius: 🇾🇹 :mayotte: 🎖 :medal_military: 🏅 :medal_sports: 🤼♂ :men_wrestling: 🕎 :menorah: 🇲🇽 :mexico: 🇫🇲 :micronesia: 🖕 :middle_finger: 🥛 :milk_glass: 🇲🇩 :moldova: 🇲🇨 :monaco: 🤑 :money_mouth_face: 🇲🇳 :mongolia: 🇲🇪 :montenegro: 🇲🇸 :montserrat: 🌔 :moon: 🇲🇦 :morocco: 🕌 :mosque: 🛥 :motor_boat: 🛵 :motor_scooter: 🏍 :motorcycle: 🛣 :motorway: ⛰ :mountain: 🚵 :mountain_biking_man: 🚵♀ :mountain_biking_woman: 🏔 :mountain_snow: 🇲🇿 :mozambique: 🤶 :mrs_claus: 🇲🇲 :myanmar: 🇳🇦 :namibia: 🏞 :national_park: 🇳🇷 :nauru: 🤢 :nauseated_face: 🇳🇵 :nepal: 🤓 :nerd_face: 🇳🇱 :netherlands: 🇳🇨 :new_caledonia: 🇳🇿 :new_zealand: 🗞 :newspaper_roll: ⏭ :next_track_button: 🙅♂ :ng_man: 🙅 :ng_woman: 🇳🇮 :nicaragua: 🇳🇪 :niger: 🇳🇬 :nigeria: 🌃 :night_with_stars: 🇳🇺 :niue: 🙅♂ :no_good_man: 🙅 :no_good_woman: 🇳🇫 :norfolk_island: 🇰🇵 :north_korea: 🇲🇵 :northern_mariana_islands: 🇳🇴 :norway: 🛢 :oil_drum: 🙆♂ :ok_man: 🗝 :old_key: 🕉 :om: 🇴🇲 :oman: 📖 :open_book: ☂ :open_umbrella: 🍊 :orange: ☦ :orthodox_cross: 🦉 :owl: 🖌 :paintbrush: 🇵🇰 :pakistan: 🇵🇼 :palau: 🇵🇸 :palestinian_territories: 🇵🇦 :panama: 🥞 :pancakes: 🖇 :paperclips: 🇵🇬 :papua_new_guinea: 🇵🇾 :paraguay: ⛱ :parasol_on_ground: 🛳 :passenger_ship: ⏸ :pause_button: ☮ :peace_symbol: 🥜 :peanuts: 🖊 :pen: 🤺 :person_fencing: 🇵🇪 :peru: 🇵🇭 :philippines: ⛏ :pick: 🏓 :ping_pong: 🇵🇳 :pitcairn_islands: 🛐 :place_of_worship: 🍽 :plate_with_cutlery: ⏯ :play_or_pause_button: 🇵🇱 :poland: 👮 :policeman: 👮♀ :policewoman: 🍿 :popcorn: 🇵🇹 :portugal: 🥔 :potato: 😡 :pout: 🙎♂ :pouting_man: 🙎 :pouting_woman: 📿 :prayer_beads: 🤰 :pregnant_woman: ⏮ :previous_track_button: 🤴 :prince: 🖨 :printer: 🇵🇷 :puerto_rico: 🇶🇦 :qatar: 🏎 :racing_car: ☢ :radioactive: 🛤 :railway_track: 🏳🌈 :rainbow_flag: 🤚 :raised_back_of_hand: 🖐 :raised_hand_with_fingers_splayed: 🙋♂ :raising_hand_man: 🙋 :raising_hand_woman: ⏺ :record_button: 🎗 :reminder_ribbon: ⛑ :rescue_worker_helmet: 🇷🇪 :reunion: 🦏 :rhinoceros: 🗯 :right_anger_bubble: 🤖 :robot: 🇷🇴 :romania: 🏵 :rosette: 🚣 :rowing_man: 🚣♀ :rowing_woman: 🏃 :running_man: 🏃♀ :running_woman: 🇷🇼 :rwanda: 🇼🇸 :samoa: 🇸🇲 :san_marino: 🇸🇹 :sao_tome_principe: 💁♂ :sassy_man: 💁 :sassy_woman: 🇸🇦 :saudi_arabia: 🦂 :scorpion: 🤳 :selfie: 🇸🇳 :senegal: 🇷🇸 :serbia: 🇸🇨 :seychelles: 🥘 :shallow_pan_of_food: ☘ :shamrock: 🦈 :shark: 🛡 :shield: ⛩ :shinto_shrine: 🛍 :shopping: 🛒 :shopping_cart: 🦐 :shrimp: 🇸🇱 :sierra_leone: 🇸🇬 :singapore: 🇸🇽 :sint_maarten: ⛷ :skier: ☠ :skull_and_crossbones: 🛌 :sleeping_bed: 🇸🇰 :slovakia: 🇸🇮 :slovenia: 🛩 :small_airplane: 🤧 :sneezing_face: ☃ :snowman_with_snow: 🇸🇧 :solomon_islands: 🇸🇴 :somalia: 🇿🇦 :south_africa: 🇬🇸 :south_georgia_south_sandwich_islands: 🇸🇸 :south_sudan: 🗣 :speaking_head: 🕷 :spider: 🕸 :spider_web: 🗓 :spiral_calendar: 🗒 :spiral_notepad: 🥄 :spoon: 🦑 :squid: 🇱🇰 :sri_lanka: 🇧🇱 :st_barthelemy: 🇸🇭 :st_helena: 🇰🇳 :st_kitts_nevis: 🇱🇨 :st_lucia: 🇵🇲 :st_pierre_miquelon: 🇻🇨 :st_vincent_grenadines: 🏟 :stadium: ☪ :star_and_crescent: ✡ :star_of_david: ⏹ :stop_button: 🛑 :stop_sign: ⏱ :stopwatch: 🎙 :studio_microphone: 🥙 :stuffed_flatbread: 🇸🇩 :sudan: 🌥 :sun_behind_large_cloud: 🌦 :sun_behind_rain_cloud: 🌤 :sun_behind_small_cloud: 🏄 :surfing_man: 🏄♀ :surfing_woman: 🇸🇷 :suriname: 🇸🇿 :swaziland: 🇸🇪 :sweden: 🏊 :swimming_man: 🏊♀ :swimming_woman: 🇨🇭 :switzerland: 🕍 :synagogue: 🇸🇾 :syria: 🌮 :taco: 🇹🇼 :taiwan: 🇹🇯 :tajikistan: 🇹🇿 :tanzania: 🇹🇭 :thailand: 🌡 :thermometer: 🇺🇾 :uruguay: 🎟 :tickets: ⏲ :timer_clock: 🇹🇱 :timor_leste: 💁♂ :tipping_hand_man: 💁 :tipping_hand_woman: 🇹🇬 :togo: 🇹🇰 :tokelau: 🇹🇴 :tonga: 🌪 :tornado: 🇹🇷 :tr: 🖲 :trackball: 🇹🇹 :trinidad_tobago: 🥃 :tumbler_glass: 🇹🇳 :tunisia: 🦃 :turkey: 🇹🇲 :turkmenistan: 🇹🇨 :turks_caicos_islands: 🇹🇻 :tuvalu: 🇺🇬 :uganda: 🇺🇦 :ukraine: 🦄 :unicorn: 🇦🇪 :united_arab_emirates: 🇻🇮 :us_virgin_islands: 🇺🇿 :uzbekistan: 🇻🇺 :vanuatu: 🇻🇦 :vatican_city: 🇻🇪 :venezuela: 🇻🇳 :vietnam: 🏐 :volleyball: 🖖 :vulcan_salute: 🚶 :walking: 🚶 :walking_man: 🚶♀ :walking_woman: 🇼🇫 :wallis_futuna: 🗑 :wastebasket: 🏋 :weight_lifting_man: 🏋♀ :weight_lifting_woman: 🇪🇭 :western_sahara: ☸ :wheel_of_dharma: 🏳 :white_flag: 🥀 :wilted_flower: 🌬 :wind_face: 👩🎨 :woman_artist: 👩🚀 :woman_astronaut: 🤸♀ :woman_cartwheeling: 👩🍳 :woman_cook: 🤦♀ :woman_facepalming: 👩🏭 :woman_factory_worker: 👩🌾 :woman_farmer: 👩🚒 :woman_firefighter: 👩⚕ :woman_health_worker: 👩⚖ :woman_judge: 🤹♀ :woman_juggling: 👩🔧 :woman_mechanic: 👩💼 :woman_office_worker: 👩✈ :woman_pilot: 🤾♀ :woman_playing_handball: 🤽♀ :woman_playing_water_polo: 👩🔬 :woman_scientist: 🤷♀ :woman_shrugging: 👩🎤 :woman_singer: 👩🎓 :woman_student: 👩🏫 :woman_teacher: 👩💻 :woman_technologist: 👳♀ :woman_with_turban: 🤼♀ :women_wrestling: 🗺 :world_map: ✍ :writing_hand: 🇾🇪 :yemen: ☯ :yin_yang: 🇿🇲 :zambia: 🇿🇼 :zimbabwe:","link":"/2020/03/07/markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"github","slug":"github","link":"/tags/github/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"日记","slug":"日记","link":"/tags/%E6%97%A5%E8%AE%B0/"},{"name":"win10重装","slug":"win10重装","link":"/tags/win10%E9%87%8D%E8%A3%85/"},{"name":"windows软件","slug":"windows软件","link":"/tags/windows%E8%BD%AF%E4%BB%B6/"},{"name":"三体","slug":"三体","link":"/tags/%E4%B8%89%E4%BD%93/"},{"name":"博客","slug":"博客","link":"/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"性格认知","slug":"性格认知","link":"/tags/%E6%80%A7%E6%A0%BC%E8%AE%A4%E7%9F%A5/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"}],"categories":[{"name":"github","slug":"github","link":"/categories/github/"},{"name":"操作系统","slug":"操作系统","link":"/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"心情随笔","slug":"心情随笔","link":"/categories/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"},{"name":"句子迷","slug":"句子迷","link":"/categories/%E5%8F%A5%E5%AD%90%E8%BF%B7/"},{"name":"博客","slug":"博客","link":"/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"编程语言","slug":"编程语言","link":"/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"},{"name":"转载","slug":"转载","link":"/categories/%E8%BD%AC%E8%BD%BD/"},{"name":"写作工具","slug":"写作工具","link":"/categories/%E5%86%99%E4%BD%9C%E5%B7%A5%E5%85%B7/"}]}